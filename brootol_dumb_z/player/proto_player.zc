
class doomber : playerpawn abstract
{

protected eventhandler sfx;

void set_sfx(eventhandler e)
{
    if(e.getclassname() == "doomb_sfx_main")
        sfx = e;
}

protected bool is_real_player()
{
    if(!player || !player.mo || player.mo != self)
        return false;

    return true;
}

protected visual_sfx doomb_show_effect(statelabel effect_name, vector3 offset = (0, 0, 0), vector3 velocity = (0, 0, 0), vector2 visual_size = (double.nan, double.nan), double translucency = double.nan)
{
	if(sfx && is_real_player() )
		return (visual_sfx)(doomb_sfx_main(sfx).show_some_effect(self, effect_name, offset, velocity, visual_size, translucency) );

	else
		return null;
}

protected void doomb_spawn_big_blood(int spawn_height = 0)
{
	if (is_real_player() )
	{
		if(waterlevel < 1)
		{
			for(uint i = 0; i < 2 * bd_bloodamount; i++)
			{
				actor a = doomb_for_khorne("Brutal_FlyingBloodTrail", (0, 0, 0), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
				if(a)
				{
					a.setorigin(self.pos + (0, 0, spawn_height), false);
					a.vel = (random(-3, 3), random(-3, 3), random(-3, 3) );
				}

				if( (i % 2) == 0)
				{
					a = doomb_for_khorne("Brutal_FlyingBloodTrail", (0, 0, 0), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
					if(a)
					{
						a.setorigin(self.pos + (0, 0, spawn_height), false);
						a.vel = (random(-3, 3), random(-3, 3), random(-3, 3) );
					}
				}
			}
		}
	}
}

protected void doomb_spawn_burned_flesh()
{
	if (is_real_player())
	{
		A_SpawnProjectile ("XDeathBurnedMeat3", 32, 0, random (0, 360), 2, - random (0, 160));
		A_SpawnProjectile ("XDeathBurnedMeat2", 32, 0, random (0, 360), 2, - random (0, 160));
		A_SpawnProjectile ("XDeathBurnedMeat", 32, 0, random (0, 360), 2, - random (0, 160));
	}
}

protected void doomb_spawn_bloodpool()
{
	if(GetFloorTerrain().isLiquid == false)
	{
		actor a = spawn("doomb_red_blood_pool", pos:self.pos);

		if(a)
		{
			if(self.getclassname() == "doomb_cacodemon")
			{
				a.A_SetTranslation("red_to_blue");
				doomb_red_blood_pool(a).color = "blue";
			}

			if(self.getclassname() == "doomb_baron" || self.getclassname() == "doomb_knight")
			{
				a.A_SetTranslation("red_to_green");
				doomb_red_blood_pool(a).color = "green";
			}
		}
	}
}

//how much time player must left footprints
protected uint footprint_time;
protected string footprint_color;
protected bool right_footstep;
//check is player step into blood, and if yes start spawning blood footprints
protected void check_blood_pool()
{
    if(is_real_player() )
    {
        if(self.cursector && pos.z <= floorz && GetFloorTerrain().isLiquid == false)
        {
            for (Actor check = cursector.thinglist; check != null; check = check.snext)
            {
                if (check is "doomb_blood_pool")
                {
					if(check.pos.x - check.radius < self.pos.x && check.pos.x + check.radius > self.pos.x)
					{
						if(check.pos.y - check.radius < self.pos.y && check.pos.y + check.radius > self.pos.y)
						{
							footprint_time = 70;
							footprint_color = doomb_blood_pool(check).color;
						}
					}
				}
            }
        }
    }
}

protected void spawn_blood_footprint()
{
    if(is_real_player() )
	{
		if(footprint_time <= 0)
		{
			footprint_color = "";
			return;
		}

		if(pos.z <= floorz && !(GetFloorTerrain().isLiquid) && self.footprint_time > 0)
		{
			actor f = null;

			footprint_time --;
			if(right_footstep == false)
			{
				right_footstep = true;
				f = spawn("RedBloodFootPrintLeft", pos:self.pos);
			}
			else
			{
				right_footstep = false;
				f = spawn("RedBloodFootPrintright", pos:self.pos);
			}

			if(f)
			{
				switch( (name)(footprint_color) )
				{
					case 'blue' : f.A_SetTranslation("red_to_blue"); break;
					case 'green' : f.A_SetTranslation("red_to_green"); break;
					default : break;
				}

				f.A_QueueCorpse();
				f.angle = angle;
			}

			else
			{
				footprint_time = 0;
				footprint_color = "";
			}
		}

		//blood magically washed away in lava/radioactive waste
		else if(pos.z <= floorz && GetFloorTerrain().isLiquid)
		{
			footprint_time = 0;
			footprint_color = "";
		}
	}
}


override void tick()
{
	super.tick();
	check_blood_pool();
}

protected void doomb_handle_roll()
{
	if( (instatesequence(curstate, findstate("roll_left")) || instatesequence(curstate, findstate("roll_right") ) ) && rolling == false)
	{
		rolling = true;
	}
}

override void CheckJump()
{
	super.CheckJump();
	if(vel.z != 0)
		setstatelabel("IsJumpin");
}

protected void doomb_init_fatality_camera()
{
	if(!camera)
	{
		camera = spawn("fatality_camera", self.pos);
		camera.master = self.player.mo;
	}

	if(is_real_player() && camera)
	{
		self.player.cheats |= CF_GODMODE2;
		self.player.mo.speed = 0;
		self.player.camera = camera;
		fatality_camera(camera).turn_on();
		camera.setorigin(self.pos, false);
	}
}

protected void doomb_destroy_fatality_camera()
{
	if(is_real_player() && camera)
	{
		fatality_camera(camera).turn_off();
		self.player.cheats &= ~CF_GODMODE2;
		self.player.camera = self.player.mo;
		self.player.mo.speed = 1;
	}
}

protected actor camera;

private state roll_state;
private uint roll_ticks;
private bool rolling;

//for blood spawning
protected eventhandler blood_throne;

void set_blood_throne(eventhandler e)
{
    if(e.getclassname() == "doomb_blood_god")
        blood_throne = e;
}

protected actor doomb_for_khorne(class<actor> it = null, vector3 off = (0, 0, 0), vector3 vel_dir = (0, 0, 0) )
{
	if(blood_throne && it)
	{
		if(it is "doomb_blood")
		{
			doomb_blood b = doomb_blood_god(blood_throne).doomb_blood_bank(it);
			if(b)
			{
				b.setorigin(pos + off, false);
				b.vel = vel_dir;
				b.setstate(b.findstate("spawn"));
				return b;
			}
		}
	}

	return null;
}

}

class fatality_camera : actor
{
private bool watch_fatality;

void turn_on()
{
	watch_fatality = true;
}
void turn_off()
{
	watch_fatality = false;
}

default
{
	+nointeraction
	+noclip
	cameraheight 5;
}

override void tick()
{
	super.tick();
	if(watch_fatality && master)
	{
		double pt = clamp(master.pitch, -10, 20);

		double ang_x = cos(master.angle);
		double ang_y = sin(master.angle);

		angle = master.angle;
		pitch = pt;
		setorigin(master.pos + ( (ang_x, ang_y, 0) * -100) + (0, 0, master.height/2), true);
	}
}

override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
{
	//friendly marines cant harm player
	if( (inflictor && inflictor is "doomb_marine_base") || (source && source is "doomb_marine_base") )
	{
		return 0;
	}

	return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
}

}





CLASS RedBloodFootPrintLeft: actor
{ 
Default {
    RenderStyle "normal";
    Scale 0.09;
	alpha 0.99;
    +CLIENTSIDEONLY;
	+noclip
}
states
{
    Spawn:
        foot A -1;
	stop;
	}
}

CLASS RedBloodFootPrintright : actor
{ 
Default {
    RenderStyle "normal";
    Scale 0.09;
	alpha 0.99;
    +CLIENTSIDEONLY;
	+noclip
}
states
{
    Spawn:
        foot A -1;
	stop;
	}
}









class doom_player_movement : eventhandler
{
override void NetworkProcess(ConsoleEvent e)
{
	if(e.Name == 'roll_left')
	{
		players[e.Player].mo.setstatelabel("roll_left");
	}

	if(e.Name == 'roll_right')
	{
		players[e.Player].mo.setstatelabel("roll_right");
	}
}

}