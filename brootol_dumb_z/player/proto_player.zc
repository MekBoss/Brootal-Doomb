
class doomber : playerpawn abstract
{

protected eventhandler sfx;

void set_sfx(eventhandler e)
{
    if(e.getclassname() == "doomb_sfx_main")
        sfx = e;
}

protected bool is_real_player()
{
    if(player || player.mo || player.mo == self)
        return true;

    return false;
}

protected visual_sfx doomb_show_effect(statelabel effect_name, vector3 offset = (0, 0, 0), vector3 velocity = (0, 0, 0), vector2 visual_size = (double.nan, double.nan), double translucency = double.nan)
{
	if(sfx && is_real_player() )
		return (visual_sfx)(doomb_sfx_main(sfx).show_some_effect(self, effect_name, offset, velocity, visual_size, translucency) );

	else
		return null;
}

protected void doomb_spawn_big_blood(int spawn_height = 0)
{
	if (is_real_player() )
	{
		if(waterlevel < 1)
		{
			for(uint i = 0; i < 2 * bd_bloodamount; i++)
			{
				actor a = A_SpawnProjectile ("Brutal_FlyingBloodTrail", 0, 0, random (0, 180), 2, - random (0, 180) );
				a.setorigin(self.pos + (0, 0, spawn_height), false);

				if( (i % 2) == 0)
				{
					a = A_SpawnProjectile ("Brutal_FlyingBloodTrail", 15, 0, random (0, 360), 2, - random (0, 180) );
					a.setorigin(self.pos + (0, 0, spawn_height), false);
				}
			}
		}
	}
}

protected void doomb_spawn_burned_flesh()
{
	if (is_real_player())
	{
		A_SpawnProjectile ("XDeathBurnedMeat3", 32, 0, random (0, 360), 2, - random (0, 160));
		A_SpawnProjectile ("XDeathBurnedMeat2", 32, 0, random (0, 360), 2, - random (0, 160));
		A_SpawnProjectile ("XDeathBurnedMeat", 32, 0, random (0, 360), 2, - random (0, 160));
	}
}

protected void doomb_spawn_bloodpool()
{
	if(GetFloorTerrain().isLiquid == false)
	{
		actor a = spawn("doomb_red_blood_pool", pos:self.pos);

		if(a)
		{
			if(self.getclassname() == "doomb_cacodemon")
			{
				a.A_SetTranslation("red_to_blue");
				doomb_red_blood_pool(a).color = "blue";
			}

			if(self.getclassname() == "doomb_baron" || self.getclassname() == "doomb_knight")
			{
				a.A_SetTranslation("red_to_green");
				doomb_red_blood_pool(a).color = "green";
			}
		}
	}
}

//how much time player must left footprints
protected uint footprint_time;
protected string footprint_color;
protected bool right_footstep;
//check is player step into blood, and if yes start spawning blood footprints
protected void check_blood_pool()
{
    if(is_real_player() )
    {
        if(self.cursector && pos.z <= floorz && GetFloorTerrain().isLiquid == false)
        {
            for (Actor check = cursector.thinglist; check != null; check = check.snext)
            {
                if (check is "doomb_blood_pool")
                {
					if(check.pos.x - check.radius < self.pos.x && check.pos.x + check.radius > self.pos.x)
					{
						if(check.pos.y - check.radius < self.pos.y && check.pos.y + check.radius > self.pos.y)
						{
							footprint_time = 70;
							footprint_color = doomb_blood_pool(check).color;
						}
					}
				}
            }
        }
    }
}

protected void spawn_blood_footprint()
{
    if(is_real_player() )
	{
		if(footprint_time <= 0)
		{
			footprint_color = "";
			return;
		}

		if(pos.z <= floorz && !(GetFloorTerrain().isLiquid) && self.footprint_time > 0)
		{
			actor f = null;

			footprint_time --;
			if(right_footstep == false)
			{
				right_footstep = true;
				f = spawn("RedBloodFootPrintLeft", pos:self.pos);
			}
			else
			{
				right_footstep = false;
				f = spawn("RedBloodFootPrintright", pos:self.pos);
			}

			if(f)
			{
				switch( (name)(footprint_color) )
				{
					case 'blue' : f.A_SetTranslation("red_to_blue"); break;
					case 'green' : f.A_SetTranslation("red_to_green"); break;
					default : break;
				}

				f.A_QueueCorpse();
				f.angle = angle;
			}

			else
			{
				footprint_time = 0;
				footprint_color = "";
			}
		}

		//blood magically washed away in lava/radioactive waste
		else if(pos.z <= floorz && GetFloorTerrain().isLiquid)
		{
			footprint_time = 0;
			footprint_color = "";
		}
	}
}


override void tick()
{
	super.tick();
	check_blood_pool();
}

override void CheckJump()
{
	super.CheckJump();
	if(vel.z != 0)
		setstatelabel("IsJumpin");
}

}




CLASS RedBloodFootPrintLeft: actor
{ 
Default {
    RenderStyle "normal";
    Scale 0.09;
	alpha 0.99;
    +CLIENTSIDEONLY;
}
states
{
    Spawn:
        foot A -1;
	stop;
	}
}

CLASS RedBloodFootPrintright : actor
{ 
Default {
    RenderStyle "normal";
    Scale 0.09;
	alpha 0.99;
    +CLIENTSIDEONLY;
}
states
{
    Spawn:
        foot A -1;
	stop;
	}
}