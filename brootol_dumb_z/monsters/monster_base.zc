class dumb_monster_base : actor
{
//if you have a feeling that zscripted project brutality and zscripted brutal doom share similoar code that not a feeling 

//link to event which control effects
protected eventhandler effects;
void set_effects(eventhandler sfx)
{
    effects = sfx;
}


//handler for freeze/fatality/dismembering and other death types
//where monster ripped to pieces
protected bool frozen, dismembered, cant_resurrect;
override bool CanResurrect(Actor other, bool passive)
{
	return !cant_resurrect;
}

//head position is height on which "body" of monster should become "head"
//I recomend to set head_starting_position approx. to "monster heght" - "monster height / 10"
//because golden ratio and it dont looks stupid in game
protected double head_mul, head_pos, legs_pos;

Property headshot_multiplier : head_mul;
Property head_starting_position : head_pos;

//for legs, height where legs lost it preciese name and turns into ass
Property legs_height_max : legs_pos;

//references to gore function so it can decide what blood and how much spawn
//blood color obvious, blood size is amount of a blood/gore it must spawn(realistic/japanes cartoon/etc)
//not confuse with cvar
protected string blood_color, blood_size;

//blood color for translation, by default are red, can be or green or blue
Property blood_color : blood_color;
Property blood_size : blood_size;


//handling of ammo and weapon spawning after monster death
protected class<actor> weapon_type;

Property weapon_type : weapon_type;

//true weapon, false ammo
protected bool chose_what_spawn()
{
	if(random(0, 10) > 7) {return true;}
	return false;
}

protected void spawn_reward()
{
	if(weapon_type != null)
	{
		if( chose_what_spawn() )
		{
			spawn(weapon_type, self.pos + (0, 0, default.height/2) ).vel.z = 5;
		}
		else
		{
			class<Ammo> amo = weapon(getdefaultbytype(weapon_type) ).AmmoType1;
			if(amo == null) return;
			inventory am = (inventory)(spawn(amo,  + (0, 0, default.height/2) ) );
			if(random(0, 1) == 1) inventory(am).amount += random(0, inventory(am).amount);
		}
	}
}

override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
{
	spawn_reward();
	super.Die(source, inflictor, dmgflags);
}



default
{
	dumb_monster_base.headshot_multiplier 1;
	dumb_monster_base.head_starting_position -1;//so that if someone forgot to define this number monster dont get headshot from every attack
	dumb_monster_base.legs_height_max -1;//same for legs
	monster;
	
	dumb_monster_base.blood_color "";//by default it "null", empty string
	dumb_monster_base.blood_size "";//same for size

	dumb_monster_base.weapon_type '';//weapon type must be defined in 'final' monster definition
}


//internal gzdoom function for damaging actors
override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
{	//check if monster actually alive
	if(self.bkilled == false)
	{
        //explosion cant inflict headshot
		if(!(flags & DMG_EXPLOSION) )
		{
			//to handle cases when actor vulnerable/invulnerable to some damage type
			//before apply headshot multiplicator
			int new_damage = super.DamageMobj(inflictor, source, damage, mod, flags ,angle);
		
			//find relative position of inflictor
			vector3 relat_pos = (0, 0, 0);
			if(inflictor != null)
                relat_pos = self.vec3to(inflictor);
		    
            //if head variable valid
			if(dumb_monster_base(self).head_pos > -1 && relat_pos.z >= dumb_monster_base(self).head_pos)
			{
				new_damage *= self.head_mul;
				return super.DamageMobj(inflictor, source, new_damage, 'headshot', flags ,angle);
			}

            //check for arrow in the knee
			if(dumb_monster_base(self).legs_pos > -1 && relat_pos.z <= dumb_monster_base(self).legs_pos)
			{
				return super.DamageMobj(inflictor, source, new_damage, 'leg', flags ,angle);
			}

			//if((inflictor is "PB_player_pawn_base" || source is "PB_player_pawn_base") && self.target == null)
			//{
			//	console.printf("here, probably, must be shown some fatality");
				//fatality placeholder
			//}

			return new_damage;
		}

        //its explosion
		return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
    //case when monster already dead
	else
	{
		int dam = super.DamageMobj(inflictor, source, damage, mod, flags, angle);

		if(health - dam <= 0)
			setstatelabel("xdeath");

		return dam;
	}
}

//handling of freeze death
override double GetDeathHeight()
{
	if(DamageType == 'Ice' || DamageType == 'Freeze' || DamageType == 'Chill')
	{return default.height;}
	return super.GetDeathHeight();
}

//how much time monster seeek it target before forgeting
protected int memory_timer;
const max_memory = 20;
protected void dumb_monster_memory(statelabel idle_state = "idle")
{
	memory_timer++;
	if(memory_timer > max_memory)
	{
		memory_timer = 0;
		a_cleartarget();
		state jump_to = findstate(idle_state);
		if(jump_to == null) jump_to = findstate("see");
		setstate(jump_to);
	}
}

//for gibbing death
protected void simple_death_handler()
{
	health += 200;
	self.bDONTTHRUST = true;
	self.bNOPAIN = true;
	self.bNODROPOFF = false;
	self.bSLIDESONWALLS = true;
	self.bsolid = false;
	self.bcorpse = true;
	self.bshootable = true;
	a_setsize(default.radius, default.height / 10);
}

protected double prev_z_vel;

protected bool check_falling()
{
	if(vel.z == 0 && prev_z_vel < 0) return true;
	prev_z_vel = vel.z;
	return false;
}

protected void gibbed_falling()
{
	if(check_falling() ) {}
	else{setstate(curstate);}
}

states
{
	//kill monsters and mdk cheats damage type
	//so it wont explode computer by spawning >9000 gore actors
	Death.Massacre:
		tnt1 a 1;
	stop;

	Death.Ice:
	Death.Freeze:
	Death.Frost:
		"####" "#" 0
		{
			self.bSHOOTABLE = false; self.bSOLID = false;
			A_SetTranslation("ice");
			cant_resurrect = true;
		}
		"####" "#" 1 {tics = random(350, 700);}
	
		"####" "#" 5
		{
			if(scale.x > 0.01)
			{
				scale -= (0.01, 0.01);
				//spawn smoke here
				setstate(curstate);
			}
		}
	Stop;

	death.desintegrate:
        TNT1 A 0 A_XScream;
        TNT1 A 0 A_NoBlocking;
		TNT1 AAAAAAAA 0 A_SpawnProjectile ("Brutal_FlyingBloodFake", 30, 0, random (0, 360), 2, random (0, 90));
		TNT1 AAAA 0 A_SpawnProjectile ("Brutal_FlyingBlood", 37, 0, random (0, 360), 2, random (10, 50));
		TNT1 A 0 A_SpawnProjectile ("Brutal_FlyingBlood", 37, 0, random (0, 360), 2, random (40, 60));
		TNT1 AAA 0 A_SpawnProjectile ("BloodmistSmall", 37, 0, random (0, 360), 2, random (30, 90));
		TNT1 AA 0 A_SpawnProjectile ("XDeath1", 30, 0, random (0, 360), 2, random (0, 90));
		TNT1 AAA 0 A_SpawnProjectile ("XDeath2", 30, 0, random (0, 360), 2, random (0, 90));
		TNT1 AAA 0 A_SpawnProjectile ("XDeath3", 30, 0, random (0, 360), 2, random (0, 90));
		TNT1 AAAAA 0 A_SpawnProjectile ("Instestin", 24, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 A_SpawnItem("SplatteredLarge");
		TNT1 A 0 A_SpawnProjectile ("SuperGoreSpawner", 30, 0, random (0, 360), 2, random (10, 90));
		ID50 ABCDEF 7;
		ID50 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 13 A_SpawnProjectile ("PlasmaSmoke", 8, 0, random (0, 360), 2, random (90, 110));
		ID50 G -1;
    Stop;

}


protected uint limb_state;

override void beginplay()
{
	super.beginplay();
	limb_state |= DLF_NO_LEFT_HAND;

	console.printf("%i", limb_state);
	if(limb_state & DLF_NO_LEFT_HAND)
		console.printf("true");

	limb_state &= ~DLF_NO_LEFT_HAND;
	console.printf("%i", limb_state);
}

}

/*
|= for turn on
&= ~"flag name" for turn off
&= for comparing

*/
enum doomb_monsters_limb_states
{
	DLF_NO_HEAD = 1,//1

	DLF_NO_RIGHT_HAND = 1<<1,//2 -> 10
	DLF_NO_LEFT_HAND = 1<<2,//4 -> 100
	
	DLF_NO_RIGHT_LEG = 1<<3,//8 -> 1000
	DLF_NO_LEFT_LEG = 1<<4,//and so on


};
