class doomb_monster_base : actor abstract
{
//if you have a feeling that zscripted project brutality and zscripted brutal doom share similar code that not a feeling

//link to event which control effects
protected eventhandler sfx;
void set_effects(eventhandler effects)
{
    if(effects.getclassname() == "doomb_sfx_main")
	    sfx = effects;
}
protected visual_sfx doomb_show_effect(statelabel effect_name, vector3 offset = (0, 0, 0), vector3 velocity = (0, 0, 0), vector2 visual_size = (double.nan, double.nan), double translucency = double.nan)
{
	if(sfx)
		return doomb_sfx_main(sfx).show_some_effect(self, effect_name, offset, velocity, visual_size, translucency);
	
	else
		return null;
}



//handler for freeze/fatality/dismembering and other death types
//where monster ripped to pieces
protected bool frozen, dismembered, cant_resurrect;

override bool CanResurrect(Actor other, bool passive)
{
	if (!passive && self.getclassname() == "doomb_archvile")
	{
		return false;
	}
	return !cant_resurrect;
}

//head position is height on which "body" of monster should become "head"
//I recomend to set head_starting_position approx. to "monster heght" - "monster height / 10"
//because golden ratio and it dont looks stupid in game
protected double head_mul, head_pos, legs_pos;

Property headshot_multiplier : head_mul;
Property head_starting_position : head_pos;

//for legs, height where legs lost it preciese name and turns into ass
Property legs_height_max : legs_pos;

//references to gore function so it can decide what blood and how much spawn
//blood color obvious, blood size is amount of a blood/gore it must spawn(realistic/japanes cartoon/etc)
//not confuse with cvar
protected string blood_color, blood_size;

//blood color for translation, by default are red, can be or green or blue
Property blood_color : blood_color;
Property blood_size : blood_size;


//handling of ammo and weapon spawning after monster death
protected class<actor> weapon_type;

Property weapon_type : weapon_type;

//true weapon, false ammo
protected bool chose_what_spawn()
{
	if(random(0, 10) > 7) {return true;}
	return false;
}

protected void spawn_reward()
{
	if(weapon_type != null && !(self is "doomb_body_base") )
	{
		if( chose_what_spawn() )
		{
			spawn(weapon_type, self.pos + (0, 0, default.height/2) ).vel.z = 5;
		}
		else
		{
			class<Ammo> amo = weapon(getdefaultbytype(weapon_type) ).AmmoType1;
			if(amo == null) return;
			inventory am = (inventory)(spawn(amo, pos + (0, 0, default.height/2) ) );
			if(random(0, 1) == 1) inventory(am).amount += random(0, inventory(am).amount);
		}
	}
}

protected bool called_die;

override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
{
	if(!called_die)
	{
		spawn_reward();
		called_die = true;
	}
	
	super.Die(source, inflictor, dmgflags, MeansOfDeath);
}
/*
override void OnDestroy()
{
	if(!called_die)
	{
		spawn_reward();
		called_die = true;
	}

	super.ondestroy();
}
*/

protected void doomb_if_boss_retreat(actor who = null, statelabel retereat_to = null)
{
	if(who && retereat_to)
	{
		if(who.bboss && who.health > 0 && random[doomb_retreat_chance](0, 10) < 3 )
			self.setstatelabel(retereat_to);
	}
}


default
{
	doomb_monster_base.headshot_multiplier 1;
	doomb_monster_base.head_starting_position -1;//so that if someone forgot to define this number monster dont get headshot from every attack
	doomb_monster_base.legs_height_max -1;//same for legs
	monster;
	
	doomb_monster_base.blood_color "";//by default it "null", empty string
	doomb_monster_base.blood_size "";//same for size

	doomb_monster_base.weapon_type '';//weapon type must be defined in 'final' monster definition
}

protected bool is_headshot(vector3 v)
{
	//if head variable valid
	if(doomb_monster_base(self).head_pos > -1 && v.z >= doomb_monster_base(self).head_pos)
		return true;

	return false;
}

protected bool is_kneeshot(vector3 v)
{
	//if leg variable valid
	if(doomb_monster_base(self).legs_pos > -1 && v.z <= doomb_monster_base(self).legs_pos)
		return true;

	return false;
}

override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
{	//check if monster actually alive
	if(self.bkilled == false)
	{
        //explosion cant inflict headshot
		if(!(flags & DMG_EXPLOSION) && inflictor)
		{
			//to handle cases when actor vulnerable/invulnerable to some damage type
			//before apply headshot multiplicator
			int new_damage = damage;
		
			vector3 relat_pos = self.vec3to(inflictor);

			if(is_headshot(relat_pos) )
			{
				new_damage *= (int)(self.head_mul);
				return super.DamageMobj(inflictor, source, new_damage, 'headshot', flags ,angle);
			}

            //check for arrow in the knee
			if(is_kneeshot(relat_pos))
			{
				return super.DamageMobj(inflictor, source, new_damage, 'leg', flags ,angle);
			}

			if( (source is "playerpawn") )
			{
				if(source.player.readyweapon.getclassname() == "Melee_Attacks" )
				{
					//backstab
					if( /*self.LastHeard == null &&*/ self.target == null && !(source.player.cheats & CF_NOTARGET) )
						return super.DamageMobj(inflictor, source, self.health, 'back_stab', flags, angle);
					
					//default fatality
					else if(findstate("Death.Fatality") && (health - new_damage) < 0 )
						return super.DamageMobj(inflictor, source, damage, 'Fatality', flags, angle);

				}
			}

			return super.DamageMobj(inflictor, source, damage, mod, flags ,angle);
		}

        //its explosion
		return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}

    //case when monster already dead, but technicallly still can be shoot
	else
	{
		int dam = super.DamageMobj(inflictor, source, damage, mod, flags, angle);

		if(health - dam <= 0)
			setstatelabel("xdeath");

		return dam;
	}
}

//can actually hit another actor(not only monster target)
protected actor doomb_cheap_melee_attack(double distance = 0, int dam = 0, name damage_type = "")
{
	a_facetarget();
	double new_pitch = AimLineAttack (angle, distance, null, 0., ALF_CHECK3D);
	FLineTraceData punch;
	LineTrace(angle + frandom(-5, 5), distance, new_pitch + frandom (-5, 5),
	offsetz:height / 2, data: punch);
	
	if(punch.HitType == TRACE_HitActor && (punch.hitactor.getclass() != self.getclass() || infighting  == 1) )
	{
		//console.printf("cheap melee hit %s", punch.hitactor.getclassname() );
		punch.hitactor.damagemobj(self, self, dam, damage_type, 0, 0);
	}

	return punch.hitactor;
}

//handling of freeze death
override double GetDeathHeight()
{
	if(DamageType == 'Ice' || DamageType == 'Freeze' || DamageType == 'Chill')
		return default.height;

	return super.GetDeathHeight();
}

//how much time monster seeek it target before forgeting
protected int memory_timer;
const max_memory = 30;
protected void doomb_monster_memory(statelabel idle_state = "idle")
{
	memory_timer++;
	if(memory_timer > max_memory)
	{
		memory_timer = 0;
		a_cleartarget();
		state jump_to = findstate(idle_state);
		if(jump_to == null)
			jump_to = findstate("see");

		setstate(jump_to);
	}
}

protected void doomb_update_memory()
{
	memory_timer = 0;
}

protected bool is_melee_player_kill()
{
	if(target && target.player)
	{
		vector3 vec_diff = pos - target.pos;
		double rough_dist = self.radius + 64;//64 is a default doom fist attack distance

		if(vec_diff dot vec_diff <= rough_dist * rough_dist && (target.player.readyweapon.getclassname() == "Melee_Attacks" || target.player.readyweapon.SlotNumber == doomb_melee_weapon_slot_number) )
		{
			return true;
		}
	}

	return false;
}

protected double prev_z_vel;

protected bool check_falling()
{
	if(vel.z == 0 && prev_z_vel < 0)
		return true;
	
	prev_z_vel = vel.z;
	return false;
}

protected void gibbed_falling()
{
	if(check_falling() ) {}
	else{setstate(curstate);}
}

states
{
	bug:
		"####" "#" -1
		{
			console.printf("actor %s at %F %F %F  miss state changing ", getclassname(), pos.x, pos.y, pos.z);
		}
	stop;

	//kill monsters and mdk cheats damage type
	//so it wont explode computer by spawning >9000 blood actors
	Death.Massacre:
		tnt1 a 1;
	stop;

	Death.Ice:
	Death.Freeze:
	Death.Frost:
		"####" "#" 0
		{
			self.bSHOOTABLE = false; self.bSOLID = false;
			A_SetTranslation("ice");
			cant_resurrect = true;
		}
		"####" "#" 1 {tics = random(350, 700);}
	
		"####" "#" 5
		{
			if(scale.x > 0.01)
			{
				scale -= (0.01, 0.01);
				//spawn vapor here
				//setstate(curstate);
			}
		}
	wait;

	Death.GreenFire:
		TNT1 A 0 A_XScream;
		TNT1 A 0 A_NoBlocking;
		TNT1 AAAA 0 A_SpawnProjectile ("Brutal_Blood", 30, 0, random (0, 360), 2, random (0, 160));
		
		TNT1 A 0 A_SpawnProjectile ("XDeathBurnedArm", 32, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 A_SpawnProjectile ("XDeathBurnedLeg", 32, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 A_SpawnProjectile ("XDeathBurnedSkull", 32, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 doomb_spawn_burned_flesh;
		
		EXPL AAAAAAAAAAAAAAAAAAAAAAAA 0 doomb_show_effect("GreenFlameTrails", (0, 0, 50), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5) ) );
		XBRN AAAA 2 BRIGHT A_SpawnItem("GreenFlare",0,43);
	Stop;



	death.desintegrate:
        TNT1 A 0 A_XScream;
        TNT1 A 0 A_NoBlocking;
		TNT1 AAAA 0 A_SpawnProjectile ("Brutal_FlyingBlood", 37, 0, random (0, 360), 2, random (10, 50));
		TNT1 A 0 A_SpawnProjectile ("Brutal_FlyingBlood", 37, 0, random (0, 360), 2, random (40, 60));
		TNT1 AAAA 0
		{
			actor a = doomb_for_khorne("blood_impact_splash", (0, 0, 35 ) );
			if(a)
				a.scale = (0.45, 0.45);
		}
		TNT1 AA 0 doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		TNT1 AAA 0 doomb_for_khorne("Intestine", (0, 0, 32), (frandom(-10, 10), frandom(-10, 10), frandom(0, 10) ) );
		TNT1 A 0 doomb_spawn_bloodpool();
		TNT1 A 0 doomb_gore_spawner('SuperGore', (0, 0, 30), 6);
		ID50 ABCDEF 7;
		ID50 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 13 doomb_show_effect("ExplosionSmoke", (0, 0, 0), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.5, 0), 0.1 );
		ID50 G -1;
    Stop;

	death.taunt:
	death.avoid:
		tnt1 a 0
		{
			console.printf("taunt/avoid death type");
		}
	goto bug;

	Raise:
		TNT1 A 2 doomb_show_effect("RealFlameTrailsSmall", (0, 0, 5), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ) );
		TNT1 A 0 A_SpawnItem("PentagramSpawner", 0, 60);
		TNT1 A 2 doomb_show_effect("RealFlameTrailsSmall", (0, 0, 5), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ) );
		TNT1 A 0 A_SpawnItem("PentagramSpawner", 0, 60);
		TNT1 A 0 A_SpawnItem("TeleportFog");
		TNT1 A 0 setstatelabel("see");
	goto bug;

}


protected uint limb_state;
//
protected void doomb_final_absolution(int h, int r)
{
	health += 200;
	self.bDONTTHRUST = true;
	self.bNOPAIN = true;
	self.bNODROPOFF = false;
	self.bSLIDESONWALLS = true;
	self.bsolid = false;
	self.bcorpse = true;
	self.bshootable = true;
	a_setsize(h, r);

	limb_state |= DLF_FINAL_ABSOLUTION;
	cant_resurrect = true;
}

override void tick()
{
	super.tick();

	if(limb_state &= DLF_FINAL_ABSOLUTION)
	{
		if(health <= -default.health)
		{
			doomb_spawn_entrails( (0, 0, random(30, 35) ) );
			self.destroy();
		}
	}
}







//for blood spawning
protected eventhandler blood_throne;

void set_blood_throne(eventhandler e)
{
    if(e.getclassname() == "doomb_blood_god")
        blood_throne = e;
}

protected doomb_blood doomb_for_khorne(class<actor> it = null, vector3 off = (0, 0, 0), vector3 vel_dir = (0, 0, 0) )
{
	if(blood_throne && it)
	{
		if(it is "doomb_blood")
		{
			doomb_blood b = doomb_blood_god(blood_throne).doomb_blood_bank(it);
			if(b)
			{
				b.setorigin(pos + off, false);
				b.vel = vel_dir;
				b.setstate(b.findstate("spawn"));
				return b;
			}
		}
	}

	return null;
}

protected playerinfo fatalizer;
protected actor fatality_camera, marine_fatalizer;
//set camera for player and also handle marines fatality
protected void doomb_monster_fatality_camera(actor to_who)
{
	if(to_who && to_who.player)
	{
		fatalizer = to_who.player;
	
		if(fatality_camera)//dose not supossed to happens, but still
			fatality_camera.destroy();

		fatality_camera = spawn("fatality_camera", self.pos);
		fatality_camera.tracer = self;
		fatality_camera.master = fatalizer.mo;//handle turning of a camera

		if(fatality_camera)
		{
			fatalizer.cheats |= (CF_GODMODE2);//|CF_FROZEN);
			fatalizer.camera = fatality_camera;

			fatalizer.mo.tics = -1;
			fatalizer.mo.sprite = 0;

			fatality_camera(fatality_camera).turn_on();
		}
	}

	else if(to_who && to_who is "doomb_marine_base")
	{
		marine_fatalizer = to_who;
		
		to_who.bnodamage = true;
		to_who.bnoclip = true;
		to_who.tics = -1;
		to_who.sprite = 0;
	}
}

protected void doomb_destroy_monster_fatality_camera()
{
	vel = (0, 0, 0);

	if(fatalizer)
	{
		fatalizer.mo.setorigin(pos, false);

		fatality_camera(fatality_camera).turn_off();
		fatalizer.cheats &= ~(CF_GODMODE2);//|CF_FROZEN);
		fatalizer.camera = fatalizer.mo;

		fatalizer.mo.tics = 1;
		//fatalizer.mo.sprite = -1;//just hope that player pawn jump to the next state with proper sprite


		fatality_camera.destroy();
	}

	else if (marine_fatalizer)
	{
		marine_fatalizer.setorigin(pos, false);

		fatality_camera(fatality_camera).turn_off();

		marine_fatalizer.bnodamage = false;
		marine_fatalizer.bnoclip = false;
		marine_fatalizer.tics = 0;

		fatality_camera.destroy();
	}
}



}

/*
|= for turn on
&= ~"flag name" for turn off
&= for comparing

*/
enum doomb_monsters_limb_states
{
	DLF_NO_HEAD = 1,//1

	DLF_NO_RIGHT_HAND = 1<<1,//2 -> 10
	DLF_NO_LEFT_HAND = 1<<2,//4 -> 100
	
	DLF_NO_RIGHT_LEG = 1<<3,//8 -> 1000
	DLF_NO_LEFT_LEG = 1<<4,//and so on

	DLF_FINAL_ABSOLUTION = 1<<10//
};

class doomb_monster_spawner : eventhandler
{
override void CheckReplacement(ReplaceEvent e)
{
	if(e.Replacee == "Archvile")
	{
		e.Replacement = "doomb_archvile";
		e.isfinal = true;
	}

	if(e.Replacee == "wolfensteinss")
	{
		if(level.levelnum == 31 || level.levelnum == 32)
		{
			e.Replacement = "nazi";
			e.isfinal = true;
		}

		else
		{
			e.Replacement = "doomb_evil_marine";
			e.isfinal = true;
		}
	}

	//also handle specific bfg replacer here
	if(e.Replacee == "bfg9000")
	{
		if(level.levelnum == 31 || level.levelnum == 32)
		{
			e.Replacement = "HitlersBuzzsaw";
			e.isfinal = true;
		}

		else
		{
			e.Replacement = "BIG_FUCKING_GUN";
			e.isfinal = true;
		}
	}
	

	if(e.Replacee == "BaronofHell")
	{
		e.Replacement = "doomb_baron";
		e.isfinal = true;
	}
	if(e.Replacee == "Cyberdemon")
	{
		e.Replacement = "doomb_cyberdemon";
		e.isfinal = true;
	}

	if(e.Replacee == "SpiderMastermind")
	{
		e.Replacement = "doomb_mind";
		e.isfinal = true;
	}

	if(e.Replacee == "Cacodemon")
	{
		e.Replacement = "doomb_caco";
		e.isfinal = true;
	}

	if(e.Replacee == "ChaingunGuy")
	{
		e.Replacement = "doomb_commando";
		e.isfinal = true;
	}

	if(e.Replacee == "Demon")
	{
		e.Replacement = "doomb_pinky";
		e.isfinal = true;
	}

	if(e.Replacee == "DoomImp")
	{
		e.Replacement = "doomb_Imp";
		e.isfinal = true;
	}

	if(e.Replacee == "HellKnight")
	{
		e.Replacement = "doomb_knight";
		e.isfinal = true;
	}

	if(e.Replacee == "LostSoul")
	{
		e.Replacement = "doomb_lost_soul";
		e.isfinal = true;
	}

	if(e.Replacee == "Fatso")
	{
		e.Replacement = "doomb_fatso";
		e.isfinal = true;
	}

	if(e.Replacee == "PainElemental")
	{
		e.Replacement = "doomb_elemental";
		e.isfinal = true;
	}

	if(e.Replacee == "Revenant")
	{
		e.Replacement = "doomb_Revenant";
		e.isfinal = true;
	}

	if(e.Replacee == "ShotgunGuy")
	{
		e.Replacement = "doomb_shotgun_guy";
		e.isfinal = true;
	}

	if(e.Replacee == "Arachnotron")
	{
		e.Replacement = "doomb_arachnotron";
		e.isfinal = true;
	}

	if(e.Replacee == "ZombieMan")
	{
		e.Replacement = "doomb_zombie_Man";
		e.isfinal = true;
	}

	if(e.Replacee == "Spectre")
	{
		e.Replacement = "doomb_spectrum";
		e.isfinal = true;
	}

}

}