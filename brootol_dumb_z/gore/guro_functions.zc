extend class doomb_monster_base
{
protected void doomb_sticky_guro(sticky_guro_type type = SGT_NONE)
{
	if(type == SGT_NONE)
		return;

	FLineTraceData blood_ray;

	LineTrace(
		random( 0, 360),
		60,
		-frandom(70 , 90),//- because thank you randi
		TRF_THRUACTORS | TRF_NOSKY,
		height + 1,
		data: blood_ray
	);

	if (blood_ray.HitType == TRACE_HitCeiling)
	{
		if(type == SGT_BLOOD)
			doomb_for_khorne("doomb_blood_dripping_ceiling", "spawn", blood_ray.HitLocation);

		if (type == SGT_MEAT)
			doomb_for_khorne("doomb_sticky_meat", "spawn", blood_ray.HitLocation);
	}
}


protected void doomb_head_explosion(string main_piece  = "", string additional_piece = "", vector3 offset = (0, 0, 0) )
{
	A_PlaySound("misc/xdeath4");

	for(uint i = 0; i < 4; i++)
	{
		doomb_for_khorne("doomb_non_interactive_blood", "blood_impact_splash", offset, doomb_random_velocity(5) );
		doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", offset + (0, 0, random(-10, 10) ), doomb_random_velocity(5) );
		doomb_severed_limb("SmallBrainPiece", "spawn", offset + (0, 0, random(-10, 10) ), doomb_random_velocity(5) );
		doomb_severed_limb("Teeth", "spawn", offset + (0, 0, random(-10, 10) ), doomb_random_velocity(5) );
		doomb_severed_limb("head_piece_dark", "spawn", offset + (0, 0, random(-10, 10) ), doomb_random_velocity(5) );

		doomb_spray_decal("BrutalBloodSuper");
	}

	doomb_severed_limb("eye", "spawn", offset + (0, 0, random(-10, 10) ), doomb_random_velocity(5) );
	doomb_severed_limb("head_piece", "spawn", offset + (0, 0, random(-10, 10) ), doomb_random_velocity(5) );
	doomb_severed_limb("jaw", "spawn", offset + (0, 0, random(-10, 10) ), doomb_random_velocity(5) );
	doomb_severed_limb("SmallBrainPiece", "spawn", offset + (0, 0, random(-10, 10) ), doomb_random_velocity(5) );
	/*
	HellKnightHeadPiece
	HellKnightHeadPiece2

	doomb_fatso_Eyeballs
	jaw_big

	*/

}

protected void doomb_Meat_Death_Small()
{
	doomb_spawn_entrails( (0, 0, random(30, 35) ) );
	doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
	actor a = doomb_for_khorne("doomb_non_interactive_blood", "blood_impact_splash", (0, 0, 35 ) );
	if(a)
		a.scale = (0.45, 0.45);
}

protected void doomb_Rip_Guts()
{
	doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
	doomb_severed_limb("Intestine", "spawn", (0, 0, 32), (frandom(-10, 10), frandom(-10, 10), frandom(0, 10) ) );
	doomb_spawn_entrails( (0, 0, random(30, 35) ) );
}

protected void doomb_monster_xdeath(class<actor> type_1 = null, class<actor> type_2 = null)
{
	for(uint i = 0; i < 5; i++)
	{
		doomb_severed_limb("Intestine", "spawn", (0, 0, 32), (frandom(-10, 10), frandom(-10, 10), frandom(0, 10) ) );
		doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
		doomb_blood_mist();
		doomb_sticky_guro(SGT_BLOOD);
		actor a = doomb_for_khorne("doomb_non_interactive_blood", "blood_impact_splash", (random(-20, 20), random(-20, 20), random(20, 30) ) );
		if(a)
			a.scale = (1.4, 1.4);
	}

	doomb_spawn_entrails( (0, 0, random(30, 35) ) );
	doomb_spawn_bloodpool();

	doomb_severed_limb("SmallBrainPiece", "spawn", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
	doomb_severed_limb("SmallBrainPiece", "spawn", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
}


protected void doomb_spawn_big_blood(int spawn_height = 0)
{
	if(waterlevel < 1)
    {
		for(uint i = 0; i < 2 * doomb_blood_multiplier; i++)
		{
			doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, spawn_height), doomb_random_velocity(5) );
		}
	}
}

protected void doomb_spawn_burned_flesh()
{
	doomb_severed_limb("XDeathBurnedMeat3", "spawn", (0, 0, height/2), doomb_random_velocity(5) );
	doomb_severed_limb("XDeathBurnedMeat2", "spawn", (0, 0, height/2), doomb_random_velocity(5) );
	doomb_severed_limb("XDeathBurnedMeat", "spawn", (0, 0, height/2), doomb_random_velocity(5) );
}

protected void doomb_spawn_bloodpool(blood_pool_size size = BPS_BIG, blood_color_flags color = BCF_NONE)
{
	if(GetFloorTerrain().isLiquid == false)
	{
		bool inside_another_pool = false;

		for (Actor check = cursector.thinglist; check != null; check = check.snext)
		{
			if (check is "doomb_blood_pool")
			{
				if(check.pos.x - check.radius < self.pos.x && check.pos.x + check.radius > self.pos.x)
				{
					if(check.pos.y - check.radius < self.pos.y && check.pos.y + check.radius > self.pos.y)
					{
						inside_another_pool = true;
					}
				}
			}
		}

		if(inside_another_pool)
			return;

		actor a;
		
		if(size == BPS_BIG)
			a = doomb_for_khorne("doomb_red_blood_pool");
		else if(size == BPS_SMALL)
			a = doomb_for_khorne("doomb_small_blood_pool");

		if(a)
		{
			if(color == BCF_NONE)
			{
				if(self.getclassname() == "doomb_caco")
				{
					a.A_SetTranslation("red_to_blue");
					doomb_blood_pool(a).color = "blue";
				}

				if(self.getclassname() == "doomb_baron" || self.getclassname() == "doomb_knight")
				{
					a.A_SetTranslation("red_to_green");
					doomb_blood_pool(a).color = "green";
				}
			}

			else
			{
				switch(color)
				{
					case BCF_RED:
						a.A_SetTranslation("normal");
					break;

					case BCF_GREEN:
						a.A_SetTranslation("red_to_green");
					break;
					
					case BCF_BLUE:
						a.A_SetTranslation("red_to_blue");
					break;

					default:
					break;
				}
			}
		}
	}
}

protected void doomb_much_blood(double height_offset = 50, double side_offset = 0)
{
    if(waterlevel > 1)
        return;

    A_PlaySound("misc/xdeath4");
	double relative_offset_x, relative_offset_y;
	if(side_offset != 0)
	{
		relative_offset_x = cos(angle) *  side_offset;
		relative_offset_y = sin(angle) *  side_offset;
 	}
	for(uint i = 0; i < 20; i++)
    {
        doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (relative_offset_x, relative_offset_y, random(20, 30) + height_offset ), doomb_random_velocity(5) );
    }
	actor a = doomb_for_khorne("doomb_non_interactive_blood", "blood_impact_splash", (relative_offset_x, relative_offset_y, height_offset) );
	if(a)
		a.scale = (0.45, 0.45);

    doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (relative_offset_x, relative_offset_y, height_offset ), doomb_random_velocity(5) );
}

protected void doomb_spray_decal(string type = "BrutalBloodSuper", double distance = 128, vector3 direction = (0, 0, 0), uint times = 1, double angle_bias = 0)
{
	bool random_direction = false;

	if(direction == (0, 0, 0) )
	{
		direction = (frandom(-1, 1), frandom(-1, 1), frandom(-0.5, 0.5) );
		random_direction = true;
	}

	A_PlaySound("HEDBON");

	double stored_angle = angle;
	double stored_pitch = pitch;

	angle = acos(direction.x / direction.xy.length() );
	pitch = -asin(direction.z / direction.length() );

	for(uint i = 0; i < times; i++)
	{
		a_spraydecal(type, distance);
		if(!random_direction)
		{
			angle += frandom(-angle_bias, angle_bias);
			pitch += frandom(-angle_bias, angle_bias);
		}
		else
		{
			direction = (frandom(-1, 1), frandom(-1, 1), frandom(-0.5, 0.5) );
		}
	}

	angle = stored_angle;
	pitch = stored_pitch;
}

protected void doomb_blood_mist(class<doomb_blood> type = 'doomb_non_interactive_blood', statelabel stat = 'blood_mist', vector3 offset = (0, 0, 5), uint times = 1, blood_color_flags color = BCF_NONE)
{
	for(uint tick = 0; tick < times; tick++)
	{
		if(type == null)
			type = 'doomb_non_interactive_blood';

		vector3 origin = (frandom(-1, 1), frandom(-1, 1), frandom(-0.1, 1) );
		origin *= 10;
		
		vector3 dir = origin;

		uint i = random(5, 15);
		while(i > 0)
		{
			actor a = doomb_for_khorne(type, stat, dir + offset);
			if(a)
			{
				switch(color)
				{
					case BCF_RED:
					case BCF_NONE:
					default:
						a.a_settranslation("normal");
					break;

					case BCF_GREEN:
						a.a_settranslation("red_to_green");
					break;

					case BCF_BLUE:
						a.a_settranslation("red_to_blue");
					break;
				}
			}
			
			dir += origin;
			i--;
		}
	}
}

protected void doomb_spawn_entrails(vector3 offset = (0, 0, 0), blood_color_flags color = BCF_NONE)
{
	for(uint i = 0; i < 5; i++)
	{
		doomb_internal_organ a = doomb_internal_organ( doomb_severed_limb("doomb_internal_organ", "spawn", offset, doomb_random_velocity(5) ) );

		if(a)
			a.set_gib_appearance(0, randompick(DIT_GIB, DIT_INTESTINE), color);
	}

	doomb_internal_organ a = doomb_internal_organ( doomb_severed_limb("doomb_internal_organ", "spawn", offset, doomb_random_velocity(5) ) );

	if(a)
		a.set_gib_appearance(0, DIT_STOMACH, color);
}

}

extend class doomber
{
	
protected void doomb_much_blood(double height_offset = 50, double side_offset = 0)
{
    if(waterlevel > 1)
        return;

    A_PlaySound("misc/xdeath4");
	double relative_offset_x, relative_offset_y;
	if(side_offset != 0)
	{
		relative_offset_x = cos(angle) *  side_offset;
		relative_offset_y = sin(angle) *  side_offset;
 	}
	for(uint i = 0; i < 20; i++)
    {
        doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (relative_offset_x, relative_offset_y, random(20, 30) + height_offset ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
    }
	actor a = doomb_for_khorne("doomb_non_interactive_blood", "blood_impact_splash", (relative_offset_x, relative_offset_y, height_offset) );
	if(a)
		a.scale = (0.45, 0.45);

    doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (relative_offset_x, relative_offset_y, height_offset ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
}

protected void doomb_spray_decal(string type = "", double distance = 128, vector3 direction = (0, 0, 0), uint times = 1, double angle_bias = 0)
{
	if(direction == (0, 0, 0) )
		direction = (frandom(-1, 1), frandom(-1, 1), frandom(-1, 1) );

	double stored_angle = angle;
	double stored_pitch = pitch;

	angle = acos(direction.x / direction.xy.length() );
	pitch = -asin(direction.z / direction.length() );

	for(uint i = 0; i < times; i++)
	{
		a_spraydecal(type, distance);
		angle += frandom(-angle_bias, angle_bias);
		pitch += frandom(-angle_bias, angle_bias);
	}

	angle = stored_angle;
	pitch = stored_pitch;
}

protected void doomb_blood_mist(class<doomb_blood> type = 'doomb_non_interactive_blood', statelabel stat = 'blood_mist', vector3 offset = (0, 0, 5), uint times = 1, blood_color_flags color = BCF_NONE)
{
	for(uint tick = 0; tick < times; tick++)
	{
		if(type == null)
			type = 'doomb_non_interactive_blood';

		vector3 origin = (frandom(-1, 1), frandom(-1, 1), frandom(-0.1, 1) );
		origin *= 10;
		
		vector3 dir = origin;

		uint i = random(5, 15);
		while(i > 0)
		{
			doomb_for_khorne(type, stat, dir + offset);
			dir += origin;
			i--;
		}
	}
}

protected void doomb_spawn_entrails(vector3 offset = (0, 0, 0), blood_color_flags color = BCF_NONE)
{
	for(uint i = 0; i < 5; i++)
	{
		doomb_internal_organ a = doomb_internal_organ( doomb_severed_limb("doomb_internal_organ", "spawn", offset, doomb_random_velocity(5) ) );

		if(a)
			a.set_gib_appearance(0, DIT_GIB, color);

		a = doomb_internal_organ( doomb_severed_limb("doomb_internal_organ", "spawn", offset, doomb_random_velocity(5) ) );

		if(a)
			a.set_gib_appearance(0, DIT_INTESTINE, color);
	}

	doomb_internal_organ a = doomb_internal_organ( doomb_severed_limb("doomb_internal_organ", "spawn", offset, doomb_random_velocity(5) ) );

	if(a)
		a.set_gib_appearance(0, DIT_STOMACH, color);
}


protected doomb_body_base doomb_severed_limb(class<doomb_body_base> it = null, statelabel limb_state = "spawn", vector3 offset = (0, 0, 1), vector3 vel_dir = (0, 0, 0), bool limb_ignore_cvar = false )
{
	if(blood_throne && it && (doomb_body_parts == true || limb_ignore_cvar == true) )
	{
		if(it is "doomb_body_base")
		{
			doomb_body_base b = doomb_blood_god(blood_throne).doomb_butcher(it, limb_state);
			if(!b)
				return null;

			b.setorigin(pos + offset, false);
			b.vel = vel_dir;
			return b;
		}
	}

	return null;
}

protected vector3 doomb_random_velocity(double factor = 1, bool trully = false)
{
	vector3 v;
	if(trully)
		v = (frandom(-1, 1), frandom(-1, 1), frandom(-1, 1) );
	
	else
		v = (frandom(-1, 1), frandom(-1, 1), frandom(0, 1) );

	v *= factor;

	return v;
}


}

class doomb_head_exlposion : doomb_body_base {}



