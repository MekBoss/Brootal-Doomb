extend class doomb_monster_base
{
enum body_pieces_types
{
	BPT_NONE = 0,
	BPT_JAW = 1,
}


protected void doomb_head_explosion(string main_piece  = "", string additional_piece = "", vector3 offset = (0, 0, 0) )
{
	A_PlaySound("misc/xdeath4");

	for(uint i = 0; i < 4; i++)
	{
		doomb_for_khorne("blood_impact_splash", offset);
		doomb_for_khorne("doomb_red_blood_trail", (0, 0, random(20, 30) ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
		A_SpawnProjectile ("SmallBrainPiece", 0, 0, random (0, 360), 2, random (0, 160));
		doomb_spray_decal("BrutalBloodSuper");
		A_SpawnProjectile ("Teeth", 0, 0, random (0, 360), 2, random (0, 160));
		A_SpawnProjectile ("head_piece_dark", 0, 0, random (0, 360), 2, random (0, 160));
	}

	A_SpawnProjectile ("eye", 0, 0, random (0, 360), 2, random (0, 160));
	A_SpawnProjectile ("jaw", 0, 0, random (0, 360), 2, random (0, 160));
	/*
	HellKnightHeadPiece
	HellKnightHeadPiece2

	doomb_fatso_Eyeballs
	jaw_big

	*/

}

protected void doomb_Meat_Death_Small()
{
	doomb_spawn_entrails( (0, 0, random(30, 35) ) );
	doomb_for_khorne("doomb_red_blood_trail", (0, 0, random(20, 30) ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
	{
		actor a = doomb_for_khorne("blood_impact_splash", (0, 0, 35 ) );
		if(a)
			a.scale = (0.45, 0.45);
	}
}

protected void doomb_Rip_Guts()
{
	doomb_for_khorne("doomb_red_blood_trail", (0, 0, random(20, 30) ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
	doomb_for_khorne("Intestine", (0, 0, 32), (frandom(-10, 10), frandom(-10, 10), frandom(0, 10) ) );
	doomb_spawn_entrails( (0, 0, random(30, 35) ) );
}

protected void doomb_monster_xdeath(class<actor> type_1 = null, class<actor> type_2 = null)
{
	for(uint i = 0; i < 5; i++)
	{
		doomb_for_khorne("Intestine", (0, 0, 32), (frandom(-10, 10), frandom(-10, 10), frandom(0, 10) ) );
		doomb_for_khorne("doomb_red_blood_trail", (0, 0, random(20, 30) ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
		doomb_gore_spawner();
		A_SpawnProjectile ("CeilBloodLauncher", 0, 0, random (0, 360), 2, random (50, 130));
		actor a = doomb_for_khorne("blood_impact_splash", (random(-20, 20), random(-20, 20), random(20, 30) ) );
		if(a)
			a.scale = (1.4, 1.4);
	}

	doomb_spawn_entrails( (0, 0, random(30, 35) ) );
	doomb_spawn_bloodpool();
	A_SpawnProjectile ("SmallBrainPiece", 32, 0, random (0, 360), 2, random (0, 160));
	A_SpawnProjectile ("SmallBrainPiece", 32, 0, random (0, 360), 2, random (0, 160));
}


protected void doomb_spawn_big_blood(int spawn_height = 0)
{
	if(waterlevel < 1)
    {
		for(uint i = 0; i < 2 * bd_bloodamount; i++)
		{
			actor a = doomb_for_khorne("doomb_red_blood_trail", (0, 0, 0 ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
			a.setorigin(self.pos + (0, 0, spawn_height), false);

			if( (i % 2) == 0)
			{
				a = doomb_for_khorne("doomb_red_blood_trail", (0, 0, 0 ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
				a.setorigin(self.pos + (0, 0, spawn_height), false);
			}
		}
	}
}

protected void doomb_spawn_burned_flesh()
{
	A_SpawnProjectile ("XDeathBurnedMeat3", 32, 0, random (0, 360), 2, - random (0, 160));
	A_SpawnProjectile ("XDeathBurnedMeat2", 32, 0, random (0, 360), 2, - random (0, 160));
	A_SpawnProjectile ("XDeathBurnedMeat", 32, 0, random (0, 360), 2, - random (0, 160));
}

protected void doomb_spawn_bloodpool()
{
	if(GetFloorTerrain().isLiquid == false)
	{
		bool inside_another_pool = false;

		for (Actor check = cursector.thinglist; check != null; check = check.snext)
		{
			if (check is "doomb_blood_pool")
			{
				if(check.pos.x - check.radius < self.pos.x && check.pos.x + check.radius > self.pos.x)
				{
					if(check.pos.y - check.radius < self.pos.y && check.pos.y + check.radius > self.pos.y)
					{
						inside_another_pool = true;
					}
				}
			}
		}

		if(inside_another_pool)
			return;
	
		actor a = spawn("doomb_red_blood_pool", pos:self.pos);

		if(a)
		{
			if(self.getclassname() == "doomb_caco")
			{
				a.A_SetTranslation("red_to_blue");
				doomb_red_blood_pool(a).color = "blue";
			}

			if(self.getclassname() == "doomb_baron" || self.getclassname() == "doomb_knight")
			{
				a.A_SetTranslation("red_to_green");
				doomb_red_blood_pool(a).color = "green";
			}
		}
	}
}

protected void doomb_much_blood(double height_offset = 50, double side_offset = 0)
{
    if(waterlevel > 1)
        return;

    A_PlaySound("misc/xdeath4");
	double relative_offset_x, relative_offset_y;
	if(side_offset != 0)
	{
		relative_offset_x = cos(angle) *  side_offset;
		relative_offset_y = sin(angle) *  side_offset;
 	}
	for(uint i = 0; i < 20; i++)
    {
        doomb_for_khorne("doomb_red_blood_trail", (relative_offset_x, relative_offset_y, random(20, 30) + height_offset ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
    }
	actor a = doomb_for_khorne("blood_impact_splash", (relative_offset_x, relative_offset_y, height_offset) );
	if(a)
		a.scale = (0.45, 0.45);

    doomb_for_khorne("doomb_red_blood_trail", (relative_offset_x, relative_offset_y, height_offset ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
}

protected void doomb_spray_decal(string type = "BrutalBloodSuper", double distance = 128, vector3 direction = (0, 0, 0), uint times = 1, double angle_bias = 0)
{
	bool random_direction = false;

	if(direction == (0, 0, 0) )
	{
		direction = (frandom(-1, 1), frandom(-1, 1), frandom(-0.5, 0.5) );
		random_direction = true;
	}

	A_PlaySound("HEDBON");

	double stored_angle = angle;
	double stored_pitch = pitch;

	angle = acos(direction.x / direction.xy.length() );
	pitch = -asin(direction.z / direction.length() );

	for(uint i = 0; i < times; i++)
	{
		a_spraydecal(type, distance);
		if(!random_direction)
		{
			angle += frandom(-angle_bias, angle_bias);
			pitch += frandom(-angle_bias, angle_bias);
		}
		else
		{
			direction = (frandom(-1, 1), frandom(-1, 1), frandom(-0.5, 0.5) );
		}
	}

	angle = stored_angle;
	pitch = stored_pitch;
}

protected void doomb_gore_spawner(class<doomb_blood> type = 'SuperGore', vector3 offset = (0, 0, 5), uint times = 1)
{
	for(uint tick = 0; tick < times; tick++)
	{
		vector3 origin = (frandom(-1, 1), frandom(-1, 1), frandom(-0.1, 1) );
		origin *= 10;
		
		vector3 dir = origin;

		uint i = random(5, 15);
		while(i > 0)
		{
			doomb_for_khorne(type, dir + offset);
			dir += origin;
			i--;
		}
	}
}

protected void doomb_spawn_entrails(vector3 offset = (0, 0, 0) )
{
	for(uint i = 0; i < 5; i++)
	{
		doomb_internal_organs a = doomb_internal_organs( spawn("doomb_internal_organs", pos + offset) );
		a.vel = (frandom(-6, 6), frandom(-6, 6), frandom(0, 6));
		a.set_sprite_type(i);
	}
}

}

extend class doomber
{
	
protected void doomb_much_blood(double height_offset = 50, double side_offset = 0)
{
    if(waterlevel > 1)
        return;

    A_PlaySound("misc/xdeath4");
	double relative_offset_x, relative_offset_y;
	if(side_offset != 0)
	{
		relative_offset_x = cos(angle) *  side_offset;
		relative_offset_y = sin(angle) *  side_offset;
 	}
	for(uint i = 0; i < 20; i++)
    {
        doomb_for_khorne("doomb_red_blood_trail", (relative_offset_x, relative_offset_y, random(20, 30) + height_offset ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
    }
	actor a = doomb_for_khorne("blood_impact_splash", (relative_offset_x, relative_offset_y, height_offset) );
	if(a)
		a.scale = (0.45, 0.45);

    doomb_for_khorne("doomb_red_blood_trail", (relative_offset_x, relative_offset_y, height_offset ), (frandom(-5, 5), frandom(-5, 5), frandom(0, 5) ) );
}

protected void doomb_spray_decal(string type = "", double distance = 128, vector3 direction = (0, 0, 0), uint times = 1, double angle_bias = 0)
{
	if(direction == (0, 0, 0) )
		direction = (frandom(-1, 1), frandom(-1, 1), frandom(-1, 1) );

	double stored_angle = angle;
	double stored_pitch = pitch;

	angle = acos(direction.x / direction.xy.length() );
	pitch = -asin(direction.z / direction.length() );

	for(uint i = 0; i < times; i++)
	{
		a_spraydecal(type, distance);
		angle += frandom(-angle_bias, angle_bias);
		pitch += frandom(-angle_bias, angle_bias);
	}

	angle = stored_angle;
	pitch = stored_pitch;
}

protected void doomb_gore_spawner(class<actor> type = 'SuperGore', vector3 offset = (0, 0, 5), uint times = 1)
{
	for(uint tick = 0; tick < times; tick++)
	{
		vector3 origin = (frandom(-1, 1), frandom(-1, 1), frandom(-0.1, 1) );
		origin *= 10;
		
		vector3 dir = origin;

		uint i = random(5, 15);
		while(i > 0)
		{
			doomb_for_khorne(type, dir + offset);
			dir += origin;
			i--;
		}
	}
}

protected void doomb_spawn_entrails(vector3 offset = (0, 0, 0) )
{
	for(uint i = 0; i < 5; i++)
	{
		doomb_internal_organs a = doomb_internal_organs( spawn("doomb_internal_organs", pos + offset) );
		a.vel = (frandom(-6, 6), frandom(-6, 6), frandom(0, 6));
		a.set_sprite_type(i);
	}
}

}
class doomb_head_exlposion : doomb_body_base {}