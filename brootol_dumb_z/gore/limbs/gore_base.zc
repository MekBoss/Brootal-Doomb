#include "brootol_dumb_z/gore/limbs/GORE!!!.zc"
#include "brootol_dumb_z/gore/limbs/GORE2.zc"
#include "brootol_dumb_z/gore/limbs/burned_limbs.zc"
#include "brootol_dumb_z/gore/limbs/gore_fixed.zc"
#include "brootol_dumb_z/gore/limbs/shared_parts.zc"
#include "brootol_dumb_z/gore/limbs/xdeath_collection.zc"
#include "brootol_dumb_z/gore/limbs/meat_death.zc"
#include "brootol_dumb_z/gore/limbs/head_explosion.zc"
#include "brootol_dumb_z/gore/limbs/shared_limbs.zc"


//all base classes for body related actors
class doomb_body_base : doomb_monster_base abstract
{
default
{
	radius 5;
	height 10;
 	Mass 1000;
	Health 300;
	
	-ismonster
	-countkill
	+solid
	+NOTELEPORT;
	+MOVEWITHSECTOR;
	+DONTSPLASH;
	//+NOBLOCKMONST;
	//+THRUACTORS;
	+FLOORCLIP;
	+FORCEXYBILLBOARD;
	+SHOOTABLE;

	DeathSound "misc/xdeath4";	
}

protected void doomb_random_death(name st = "")
{
	if(random(0, 10) > 7)
		a_die(st);
}

private bool initialized;
void event_initialization(eventhandler who = null)
{
	if(who && who.getclass() == 'doomb_blood_god' && getage() == 0)
		initialized = true;
}

protected bool busy;

protected void set_busy()
{
	busy = true;
}

clearscope bool is_busy() const
{
	return busy;
}


protected void doomb_blood_dying()
{
	if(waterlevel < 1)
	{
		doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
		doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
		doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
		doomb_for_khorne("doomb_non_interactive_blood", "blood_hit", (0, 0, 30) );
		doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
	}
}

States
{
	reset_self_state:
		tnt1 a -1
		{
			roll = 0;
			a_settranslation('normal');
			setorigin((double.infinity, double.infinity, double.infinity), false);
			busy = false;
		}
	stop;

	Spawn:
		TNT1 A 1900 doomb_spawn_bloodpool(BPS_SMALL);
	Loop;
		
		
	Death.plasma:
	Death.Fire:
		TNT1 A 0 A_NoBlocking;
		TNT1 A 0 A_Jump(128, "DeathFire2");
		TNT1 A 0 doomb_spawn_burned_flesh();
		EXPL AAA 0 doomb_show_effect("ExplosionSmoke", (0, 0, 0), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 1) ) );
	Stop;
		
	DeathFire2:
		TNT1 A 0 doomb_spawn_burned_flesh();
		EXPL AAA 0 doomb_show_effect("ExplosionSmoke", (0, 0, 0), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 1) ) );
	Stop;
	
	Death.Trample:
	Death.Crush:
	Death.Stomp:
	Death.punch:
		TNT1 A 0 doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		TNT1 AAAA 0 doomb_for_khorne("doomb_non_interactive_blood", "blood_impact_splash");
		TNT1 A 0 doomb_spawn_bloodpool();
		XME2 L -1;
	Stop;
	
	Death.Desintegrate:
		TNT1 A 0 doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(5) );
		TNT1 AAAA 0
		{
			actor a = doomb_for_khorne("doomb_non_interactive_blood", "blood_impact_splash", (0, 0, 35 ) );
			if(a)
				a.scale = (0.45, 0.45);
		}
	Stop;

}

}

CLASS LimbBase: doomb_body_base
{ 
States
{
	Spawn:
		TNT1 A 1900 doomb_spawn_bloodpool(BPS_SMALL);
	Loop;
	
	Death:
		TNT1 AAAAAAA 0 doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, 0 ), doomb_random_velocity(5) );
		TNT1 A 0 doomb_spawn_bloodpool(BPS_SMALL);
		XDT3 BCDEFGH 3;
	Death.Crush:
		TNT1 A 0 doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		CRSB A 9009;
	Stop;
}

}