//extend monster_base class here to temporaly dump all blood functions
#include "brootol_dumb_z/gore/blood/brutal_blood.zc"
#include "brootol_dumb_z/gore/blood/flying_blood.zc"
#include "brootol_dumb_z/gore/blood/blood_pools.zc"
#include "brootol_dumb_z/gore/BLOOD/blood_exported.zc"
#include "brootol_dumb_z/gore/BLOOD/blueblood.zc"
#include "brootol_dumb_z/gore/BLOOD/non_interactive_blood.zc"
#include "brootol_dumb_z/gore/BLOOD/underwaterblood.zc"
#include "brootol_dumb_z/gore/blood/doomb_blood.zc"



class doomb_blood : actor abstract
{

private bool event_init;

void set_init(bool b)
{
	if(GetAge() == 0)
		event_init = b;
}

protected bool get_init_state() const
{
	return event_init;
}


protected bool active;
override void beginplay()
{
	active = true;
	super.beginplay();
}

protected void activate_blood()
{
	active = true;
}

bool is_active() const
{
	return active;
}



Default
{
	+MISSILE;
	-ALLOWPARTICLES;
	-nogravity
	+CLIENTSIDEONLY;
	+NOTELEPORT;
	+THRUACTORS;
	+BLOODLESSIMPACT;
	+FORCEXYBILLBOARD;
	+NODAMAGETHRUST;
	+MOVEWITHSECTOR;
	+CORPSE;
	-DONTSPLASH;
	Decal "BrutalBloodSplat";
	damage 0;

}

protected void doomb_spawn_big_blood(int spawn_height = 0)
{
	if(waterlevel < 1)
    {
		for(uint i = 0; i < 2 * doomb_blood_multiplier; i++)
		{
			actor a = doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ) + (0, 0, spawn_height), doomb_random_velocity(5) );
		}
	}
}

protected void doomb_spawn_bloodpool(blood_pool_size size = BPS_BIG)
{
	if(GetFloorTerrain().isLiquid == false)
	{
		bool inside_another_pool = false;

		for (Actor check = cursector.thinglist; check != null; check = check.snext)
		{
			if (check is "doomb_blood_pool")
			{
				if(check.pos.x - check.radius < self.pos.x && check.pos.x + check.radius > self.pos.x)
				{
					if(check.pos.y - check.radius < self.pos.y && check.pos.y + check.radius > self.pos.y)
					{
						inside_another_pool = true;
					}
				}
			}
		}

		if(inside_another_pool)
			return;

		actor a;
		
		if(size == BPS_BIG)
			a = spawn("doomb_red_blood_pool", pos:self.pos);
		else if(size == BPS_SMALL)
			a = spawn("doomb_small_blood_pool", pos:self.pos);

		if(a)
		{
			if(self.getclassname() == "doomb_caco")
			{
				a.A_SetTranslation("red_to_blue");
				doomb_blood_pool(a).color = "blue";
			}

			if(self.getclassname() == "doomb_baron" || self.getclassname() == "doomb_knight")
			{
				a.A_SetTranslation("red_to_green");
				doomb_blood_pool(a).color = "green";
			}
		}
	}
}

protected eventhandler blood_throne;

void set_blood_throne(eventhandler e)
{
    if(e.getclass() == 'doomb_blood_god')
        blood_throne = e;
}

protected actor doomb_for_khorne(class<doomb_blood> it = null, statelabel st = 'spawn', vector3 off = (0, 0, 1), vector3 vel_dir = (0, 0, 0) )
{
	if(blood_throne && it && doomb_blood_spawner && waterlevel < 1)
	{
		if(it is 'doomb_blood')
		{
			doomb_blood b = doomb_blood_god(blood_throne).doomb_blood_bank(it, st);
			
			if(!b)
				return null;
	
			b.setorigin(pos + off, false);
			b.vel = vel_dir;
			return b;
		}
	}

	return null;
}

states
{
	wait_in_beaker:
		tnt1 a 0
		{
			if(!event_init)
				destroy();

			vel = (0, 0, 0);
			setorigin((double.infinity, double.infinity, double.infinity), false);
			a_fadeto(1, 1, false);
			active = false;
			A_SetTranslation("normal");
			roll = 0;

			for(uint i = 0; i < 10; i++)
				a_stopsound(i);
		}
		tnt1 a -1;
	stop;
}


protected vector3 doomb_random_velocity(double factor = 1, bool trully = false)
{
	vector3 v;
	if(trully)
		v = (frandom(-1, 1), frandom(-1, 1), frandom(-1, 1) );
	
	else
		v = (frandom(-1, 1), frandom(-1, 1), frandom(0, 1) );

	v *= factor;

	return v;
}


protected void doomb_sticky_guro(sticky_guro_type type = SGT_NONE)
{
	if(type == SGT_NONE)
		return;

	FLineTraceData blood_ray;

	LineTrace(
		random( 0, 360),
		60,
		-frandom(70 , 90),//- because thank you randi
		TRF_THRUACTORS | TRF_NOSKY,
		height + 1,
		data: blood_ray
	);

	if (blood_ray.HitType == TRACE_HitCeiling)
	{
		if(type == SGT_BLOOD)
			doomb_for_khorne("doomb_blood_dripping_ceiling", "spawn", blood_ray.HitLocation);

		if (type == SGT_MEAT)
			doomb_for_khorne("doomb_sticky_meat", "spawn", blood_ray.HitLocation);
	}

}

}