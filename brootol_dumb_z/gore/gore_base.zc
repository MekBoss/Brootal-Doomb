//all base classes for blood related actors
class doomb_body_base : doomb_monster_base abstract
{
protected bool bleeding;

default
{
    -ismonster
	-countkill
}

protected void doomb_random_death(name st = "")
{
	if(random(0, 10) > 7)
		a_die(st);
}


protected void doomb_meat_on_ceiling()
{
	FLineTraceData RemoteRay;

	LineTrace(
		random( 0, 360),
		60,
		-frandom(85 , 90),//- because thank you randi
		TRF_THRUACTORS | TRF_NOSKY,
		height + 1,
		data: RemoteRay
	);

	if (RemoteRay.HitType == TRACE_HitCeiling)
	{
		spawn("CeilXDeath2", pos:RemoteRay.HitLocation);
	}
}


protected void doomb_blood_dying()
{
	if(waterlevel < 1)
	{
		A_SpawnProjectile ("Brutal_FlyingBloodTrail", 30, 0, random (0, 360), 2, random (0, 360));
		A_SpawnProjectile ("Brutal_FlyingBloodTrail", 30, 0, random (0, 360), 2, random (0, 360));
		A_SpawnProjectile ("Brutal_FlyingBloodTrail", 30, 0, random (0, 360), 2, random (0, 360));
		A_SpawnProjectile ("Brutal_FlyingBloodTrail", 30, 0, random (0, 360), 2, random (0, 360));
		A_SpawnItem ("BloodHit", 0, 30);
		A_SpawnItem ("Brutal_FlyingBlood", 0, 30);
	}
}

}






class doomb_blood : actor abstract
{

Default
{
	+MISSILE;
	-nogravity
	+CLIENTSIDEONLY;
	+NOTELEPORT;
	+THRUACTORS;
	+BLOODLESSIMPACT;
	+FORCEXYBILLBOARD;
	+NODAMAGETHRUST;
	+MOVEWITHSECTOR;
	+CORPSE;
	-DONTSPLASH;
	Decal "BrutalBloodSplat";
}

protected void doomb_spawn_blood()
{
    for(uint i = 0; i < 2 * bd_bloodamount; i++)
    {
        A_SpawnProjectile ("Brutal_FlyingBloodFake", 0, 0, random (0, 360), 2, random (0, 90));

        if( (i % 2) == 0)
        {
            A_SpawnProjectile ("Brutal_FlyingBlood", 7, 0, random (0, 360), 2, random (40, 60));
	        A_SpawnProjectile ("Brutal_FlyingBlood", 7, 0, random (0, 360), 2, random (20, 40));
	        A_SpawnProjectile ("BloodmistSmall", 0, 0, random (0, 360), 2, random (10, 40));
	        A_SpawnProjectile ("BloodHit", 0, 0, random (0, 360), 2, random (0, 90));
        }
    }
}

protected void doomb_spawn_big_blood(int spawn_height = 0)
{
	if(waterlevel < 1)
    {
		for(uint i = 0; i < 2 * bd_bloodamount; i++)
		{
			actor a = A_SpawnProjectile ("Brutal_FlyingBloodTrail", 0, 0, random (0, 180), 2, - random (0, 180) );
			a.setorigin(self.pos + (0, 0, spawn_height), false);

			if( (i % 2) == 0)
			{
				a = A_SpawnProjectile ("Brutal_FlyingBloodTrail", 15, 0, random (0, 360), 2, - random (0, 180) );
				a.setorigin(self.pos + (0, 0, spawn_height), false);
			}
		}
	}
}

protected void doomb_spawn_bloodpool()
{
	if(GetFloorTerrain().isLiquid == false)
	{
		bool inside_another_pool = false;

		for (Actor check = cursector.thinglist; check != null; check = check.snext)
		{
			if (check is "doomb_blood_pool")
			{
				if(check.pos.x - check.radius < self.pos.x && check.pos.x + check.radius > self.pos.x)
				{
					if(check.pos.y - check.radius < self.pos.y && check.pos.y + check.radius > self.pos.y)
					{
						inside_another_pool = true;
					}
				}
			}
		}

		if(inside_another_pool)
			return;
	
		actor a = spawn("doomb_red_blood_pool", pos:self.pos);

		if(a)
		{
			if(self.getclassname() == "doomb_cacodemon")
			{
				a.A_SetTranslation("red_to_blue");
				doomb_red_blood_pool(a).color = "blue";
			}

			if(self.getclassname() == "doomb_baron" || self.getclassname() == "doomb_knight")
			{
				a.A_SetTranslation("red_to_green");
				doomb_red_blood_pool(a).color = "green";
			}
		}
	}
}

}

