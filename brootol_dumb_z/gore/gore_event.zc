#include "brootol_dumb_z/gore/guro_functions.zc"
#include "brootol_dumb_z/gore/dummy_guro_classes.zc"



class doomb_blood_god :eventhandler
{

override void worldthingspawned(worldevent e)
{	
	if(e.thing is "doomb_monster_base")
	    doomb_monster_base(e.thing).set_blood_throne(self);
	if(e.thing is "doomber")
	    doomber(e.thing).set_blood_throne(self);
    
	if(e.thing is "doomb_blood")
	    doomb_blood(e.thing).set_blood_throne(self);
}

override void worldtick()
{
    if(doomb_blood_debug && (level.time % 90) == 0)
        console.printf("blood array size %i", blood_stains.size() );
}



//////////////////////////////////////////////////////////////
//handling for spawning blood
//////////////////////////////////////////////////////////////
private array<doomb_blood> blood_stains;

private array<doomb_non_interactive_blood> non_interactive_blood;//silly, I know


private doomb_blood doomb_find_fresh_blood(class<actor> type = null)
{
    if(type)
	{
		if(type is "doomb_blood")
		{
			for(uint i = 0; i <= blood_stains.size(); i++)
			{
				if(i == blood_stains.size() )
				{
					doomb_blood b = doomb_blood(actor.spawn(type, (double.infinity, double.infinity, double.infinity)));
					b.set_init(true);
					blood_stains.push(b);
					b.setstatelabel("spawn");
					return b;
					break;
				}

				if(blood_stains[i] && blood_stains[i].getclass() == type && doomb_blood(blood_stains[i]).is_active() == false)
				{
					doomb_blood b = doomb_blood(actor.spawn(type, (double.infinity, double.infinity, double.infinity)));
					b.setstatelabel("spawn");
					return b;
					break;
				}

				else if (!blood_stains[i])
				{
					blood_stains.delete(i);
					i--;
				}
			}
		}
	

		//ultra hack here
		//because zscript dont have function overloading
		//it read dummy actors field and "spawn" specific which decrease performance impact
		else if(type is 'doomb_guro_placeholder')
		{
			actor b = null;

			for(uint i = 0; i <= non_interactive_blood.size(); i++)
			{
				if(i == non_interactive_blood.size() )
				{
					b = doomb_non_interactive_blood(actor.spawn('doomb_non_interactive_blood', (double.infinity, double.infinity, double.infinity)));
					doomb_non_interactive_blood(b).set_init(true);
					non_interactive_blood.push(doomb_non_interactive_blood(b) );
					break;
				}

				if(non_interactive_blood[i] && non_interactive_blood[i].getclass() == type && doomb_blood(non_interactive_blood[i]).is_active() == false)
				{
					b = doomb_blood(non_interactive_blood[i]);
					b.setstatelabel("spawn");
					break;
				}

				else if (!non_interactive_blood[i])
				{
					non_interactive_blood.delete(i);
					i--;
				}
			}

			if(!b)
				return null;

			let temp = GetDefaultByType(type);

			statelabel test = null;

			switch(doomb_guro_placeholder(temp).actor_type)
			{
				case 0:
				case DGF_NONE:
				default:
					console.printf("no states for non interactive blood");
				break;


				case DGF_BLOOD_MIST:
					b.setstatelabel('blood_mist');
				break;

				case DGF_BLOOD_DROPLET:
					b.setstatelabel('blood_droplets');
				break;
		
				case DGF_BLOOD_IMPACT_SPLASH:
					b.setstatelabel('blood_impact_splash');
				break;

				case DGF_BLOOD_HIT:
					b.setstatelabel('blood_hit');
				break;

				case DGF_RED_BLOOD_TRAIL:
					b.setstatelabel('red_blood_trail');
				break;
			}

			return doomb_blood(b);
		}
	}
    return null;
}

doomb_blood doomb_blood_bank(class<actor> type = null)
{
    return doomb_find_fresh_blood(type);
}
//////////////////////////////////////////////////////////////
//ends here
//////////////////////////////////////////////////////////////






//////////////////////////////////////////////////////////////
//handling of gibs/intestines/internals/etc.
//////////////////////////////////////////////////////////////
private array<doomb_body_base> common_gibs;


private doomb_body_base doomb_butcher_shop(class<actor> type = null)
{
    if(type)
	{
		if(type is "doomb_body_base")
		{
			for(uint i = 0; i <= common_gibs.size(); i++)
			{
				if(i == common_gibs.size() )
				{
					doomb_body_base g = doomb_body_base(actor.spawn(type, (double.infinity, double.infinity, double.infinity)));
					g.event_initialization(self);
					common_gibs.push(g);
					g.setstatelabel("spawn");
					return g;
					break;
				}

				if(common_gibs[i] && common_gibs[i].getclass() == type && doomb_body_base(common_gibs[i]).is_busy() == false)
				{
					doomb_body_base g = doomb_body_base(actor.spawn(type, (double.infinity, double.infinity, double.infinity)));
					g.setstatelabel("spawn");
					return g;
					break;
				}

				else if (!common_gibs[i])
				{
					common_gibs.delete(i);
					i--;
				}
			}
		}
/*

		//ultra hack here
		//because zscript dont have function overloading
		//it read dummy actors field and "spawn" specific which decrease performance impact
		else if(type is 'doomb_guro_placeholder')
		{
			actor g = null;

			for(uint i = 0; i <= common_gibs.size(); i++)
			{
				if(i == common_gibs.size() )
				{
					g = doomb_non_interactive_blood(actor.spawn('doomb_non_interactive_blood', (double.infinity, double.infinity, double.infinity)));
					doomb_non_interactive_blood(g).set_init(true);
					common_gibs.push(doomb_non_interactive_blood(g) );
					break;
				}

				if(common_gibs[i] && common_gibs[i].getclass() == type && doomb_blood(common_gibs[i]).is_active() == false)
				{
					g = doomb_blood(common_gibs[i]);
					break;
				}

				else if (!common_gibs[i])
				{
					common_gibs.delete(i);
					i--;
				}
			}

			if(!g)
				return null;

			let temp = GetDefaultByType(type);

			statelabel test = null;

			switch(doomb_guro_placeholder(temp).actor_type)
			{
				case 0:
				case DGF_NONE:
				default:
				break;


				case DGF_BLOOD_MIST:
					g.setstatelabel('blood_mist');
				break;
			}
			return doomb_body_base(g);
		}
*/
	}
    return null;
}

doomb_body_base doomb_butcher(class<actor> type = null, statelabel type = null)
{
    return doomb_butcher_shop(type);
}
//////////////////////////////////////////////////////////////
//end here
//////////////////////////////////////////////////////////////





override void CheckReplacement(ReplaceEvent e)
{
 	if(e.Replacee == "DeadMarine")
	{
		e.Replacement = "doomb_dead_marine";
		e.isfinal = true;
	}

	if(e.Replacee == "GibbedMarine" || e.Replacee == "GibbedMarineExtra")
	{
		e.Replacement = "doomb_gibbed_marine";
		e.isfinal = true;
	}

	if(e.Replacee == "HeadsOnAStick")
	{
		e.Replacement = "doomb_skull_pillar";
		e.isfinal = true;
	}

	if(e.Replacee == "LiveStick")
	{
		e.Replacement = "doomb_living_stick";
		e.isfinal = true;
	}

	if(e.Replacee == "DeadStick")
	{
		e.Replacement = "DeadDeadStick";
		e.isfinal = true;
	}

	if(e.Replacee == "BloodyTwitch" || e.Replacee == "NonsolidTwitch")
	{
		e.Replacement = "DeadBloodyTwitch";
		e.isfinal = true;
	}

	if(e.Replacee == "Meat2" || e.Replacee == "NonsolidMeat2")
	{
		e.Replacement = "HangingBody";
		e.isfinal = true;
	}

	if(e.Replacee == "Meat4" || e.Replacee == "NonsolidMeat4")
	{
		e.Replacement = "HangingPairOfLegs";
		e.isfinal = true;
	}

	if(e.Replacee == "Meat3" || e.Replacee == "NonsolidMeat3")
	{
		e.Replacement = "HangingDeadGuyNoLeg";
		e.isfinal = true;
	}

	if(e.Replacee == "Meat5" || e.Replacee == "NonsolidMeat5")
	{
		e.Replacement = "HangingLeg";
		e.isfinal = true;
	}

	if(e.Replacee == "HangNoGuts")
	{
		e.Replacement = "DeadHangNoGuts";
		e.isfinal = true;
	}

	if(e.Replacee == "HangBNoBrain")
	{
		e.Replacement = "DeadHangBNoBrain";
		e.isfinal = true;
	}

	if(e.Replacee == "HangTLookingDown")
	{
		e.Replacement = "DeadHangTLookingDown";
		e.isfinal = true;
	}

	if(e.Replacee == "HangTLookingUp")
	{
		e.Replacement = "DeadHangTLookingUp";
		e.isfinal = true;
	}

	if(e.Replacee == "HangTSkull")
	{
		e.Replacement = "DeadHangTSkull";
		e.isfinal = true;
	}

	if(e.Replacee == "HangTNoBrain")
	{
		e.Replacement = "DeadHangTNoBrain";
		e.isfinal = true;
	}

	if(e.Replacee == "ColonGibs")
	{
		e.Replacement = "ColonGibs2";
		e.isfinal = true;
	}

	if(e.Replacee == "BrainStem")
	{
		e.Replacement = "BrainStem2";
		e.isfinal = true;
	}

	if(e.Replacee == "RealGibs" || e.Replacee == "Gibs")
	{
		e.Replacement = "RealGibs2";
		e.isfinal = true;
	}

	if(e.Replacee == "HeadsOnAStick")
	{
		e.Replacement = "doomb_skull_pillar";
		e.isfinal = true;
	}

	if(e.Replacee == "HeadOnAStick")
	{
		e.Replacement = "ImpaledHead";
		e.isfinal = true;
	}

	if(e.Replacee == "SmallBloodPool")
	{
		e.Replacement = "doomb_red_blood_pool";
		e.isfinal = true;
	}

	if(e.Replacee == "DeadZombieman")
	{
		e.Replacement = "DeadZombieman1";
		e.isfinal = true;
	}

	if(e.Replacee == "doomb_dead_shotgunner")
	{
		e.Replacement = "Deaddoomb_shotgun_guy";
		e.isfinal = true;
	}

	if(e.Replacee == "DeadDoomImp")
	{
		e.Replacement = "DeadImp";
		e.isfinal = true;
	}

	if(e.Replacee == "DeadDemon")
	{
		e.Replacement = "DeadDemon1";
		e.isfinal = true;
	}
}

}