//contain all monster fatality states 
class doomb_marine_base : doomb_monster_base
{
//direct copypaste of cheap_melee from monster base
protected void doomb_marine_punch(double distance = 0, int dam = 0, name damage_type = "")
{
	actor a = doomb_cheap_melee_attack(distance, dam, damage_type);

	if(a)
		A_PlaySound("player/cyborg/fist");

	else
		A_PlaySound("skeleton/swing");
}

protected bool guarding;
protected bool is_guarding() const
{
	return guarding;
}


protected playerpawn leader;

protected void doomb_set_leader()
{
	if(leader) return;

	if(target && target.player && target is "playerpawn")
		leader = playerpawn(target);

	else
	{
		ThinkerIterator pl = ThinkerIterator.Create("playerpawn", STAT_PLAYER);
		playerpawn mo;
		double dist = double.infinity;

		while(mo = playerpawn(pl.Next() ) )
		{
			vector3 v = level.vec3diff(self.pos, mo.pos);
			if(v dot v < dist)
			{
				dist = v dot v;
				leader = mo;
			}
		}
	}

	if(leader)
	{
		translation = leader.translation;
	
		if(level.time > 0)
		{
			leader.a_giveinventory("doomb_player_marine_counter", 1);

			inventory mark = inventory(leader.findinventory("doomb_player_marine_counter") );

			if(mark)
			{
				doomb_player_marine_counter(mark).add_marine_type(self, getclassname() );
			}

			else
				console.printf("no item");
		}
	}
}

protected double doomb_sqrd_distance_to_leader()
{
	if(leader)
	{
		vector3 v = self.pos - leader.pos;

		double d = (v dot v);
		return d;
	}

	return double.infinity;
}

protected void doomb_warp_to_leader()
{
	if(leader)
	{
		if(doomb_sqrd_distance_to_leader() > 300 * 300)
		{
			vector2 leader_view_dir =
			(
				cos(leader.angle),
				sin(leader.angle)
			);

			vector2 dir_to_self = level.vec2diff(leader.pos.xy, self.pos.xy);
			double scalar = leader_view_dir dot dir_to_self;

			//view_dir already a unit vector by defenition
			double angle_to_self = acos(scalar / dir_to_self.length() );

			if(abs(angle_to_self) > (leader.player.fov / 2 + 5) )
			{
				//spawns behind player, i.e. player wouldnt see how marines pops out from empty space
				vector3 offset = (( cos(leader.angle), sin(leader.angle) ) * -(self.radius + leader.radius + 30), 0);
				setorigin(leader.pos + offset, false);
			}
		}
	}
}

protected void doomb_try_share_ammo()
{
	if(random(0, 100) < 5 && doomb_sqrd_distance_to_leader() < 100 * 100)
		setstatelabel("share_some_ammo");
}

protected void doomb_give_leader_ammo()
{
	if(leader)
	{
		if(doomb_sqrd_distance_to_leader() < 100 * 100)
		{
			if(spare_ammo)
			{
				actor a = spawn(spare_ammo);
				a.touch(leader);
				inventory(a).PrintPickupMessage(leader.CheckLocalView(), inventory(a).PickupMessage() );
			}
		}
	}
}

protected void doomb_marine_chase(statelabel melee_state, statelabel missile_state, statelabel on_guard_state)
{
	if(missile_state && on_guard_state)
	{
		if(target)
		{
			vector3 vec_dist = pos - target.pos;

			if(vec_dist dot vec_dist > 100 * 100)
			{
				A_Chase(melee_state, missile_state);
				A_Recoil(-1);
			}

			else
				setstatelabel(missile_state);
		}

		if(!target)
		{
			if(!leader)
				doomb_set_leader();

			//a_cleartarget();
			A_Chase(null, missile_state);
			A_Recoil(-1);

			double leader_dist = doomb_sqrd_distance_to_leader();

			if(leader_dist < 200 * 200)
				setstatelabel(on_guard_state);
		
			doomb_warp_to_leader();
		}
	}

}

protected class<ammo> spare_ammo;
property spare_ammo : spare_ammo;

Default
{
    Radius 16;
    Height 52;
    Speed 5;
    FastSpeed 22;
    Scale 1;
    MeleeRange 70;
    MaxStepHeight 52;
    MaxDropOffHeight 52;
    Mass 100;
    Health 100;

    PainChance 200;
    PainChance "Kick", 255;
    damagefactor "Leg", 0.0;
    damagefactor "Shotgun", 0.0;
    damagefactor "mini_gun", 0.0;
    damagefactor "SSG", 0.0;
    damagefactor "Trample", 0.0;
    damagefactor "bullet", 0.0;
    damagefactor "shotgun", 0.0;
    damagefactor "ssg", 0.0;
    damagefactor "Cut", 0.1;
    damagefactor "HelperMarineFatallity", 0.0;
    
    Monster;
	-solid
    +FLOORCLIP;
    +QUICKTORETALIATE;
    +NOBLOCKMONST;
    +THRUSPECIES;
    +MTHRUSPECIES;
    +LOOKALLAROUND;
    +PUSHABLE;
    +SLIDESONWALLS;
	+nodropoff
    -CANNOTPUSH;
    -COUNTKILL;
    +DONTSPLASH;
    +FIXMAPTHINGPOS;
    +USESPECIAL;
    +DONTHARMCLASS;
	+friendly
	+MISSILEMORE
	+MISSILEEVENMORE
    +DOHARMSPECIES
	
	doomb_marine_base.spare_ammo "";
    Species "Marine";
    Translation "112:127=117:127";
    BloodType "Brutal_Blood", "SawBlood";
    AttackSound "none";
    ActiveSound "none";
    DeathSound "DSMADTH";
    PainSound "*pain";
    SeeSound "None";
    Obituary "%o has been gunned down by a Marine.";

	doomb_marine_base.spare_ammo "";
}

override bool Used (Actor user)
{
    if(health > 0 && bcorpse == false)
    {
        if(guarding)
		{
			SetStateLabel("follow_player");
			guarding = false;
			speed = default.speed;
			return true;
		}

		else
		{
        	SetStateLabel("guard_area");
			guarding = true;
			speed = 0;
			return true;
		}
	}

	return false;
}

virtual int doomb_get_aditional_death_sprite()
{
    return -1; //<- return TNT1 sprite name 
}

override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
{
	//friendly marines cant harm each other
	if( (inflictor && inflictor is "doomb_marine_base") || (source && source is "doomb_marine_base") ||
	//and cant be harmed by player
	(inflictor && inflictor is "playerpawn") || (source && source is "playerpawn") )
	{
		return 0;
	}

	//cant headshot and etc marines, so call original damage mobj to save time
	return actor.DamageMobj(inflictor, source, damage, mod, flags, angle);
}

protected void doomb_trigger_monsters(sector square = null, bool original = true)
{
	if(square)
	{
		if(original)
		{
			for (Actor check = square.thinglist; check != null; check = check.snext)
			{
				if (check.bnoclip == true ||  check.bnoblockmap == true || check.bnointeraction == true || check.bkilled == true)
					continue;
				
				if(check.bismonster == true && check.health > 0 && check.bcorpse == false && check != self && !(check is "doomb_marine_base") && check.target == null )
				{
					vector3 p = level.vec3diff(self.pos, check.pos);

					if(p dot p < 250000 )//can set self target to self otherwise
						check.target = self;
				}
			}
		}
		//check neighborn sectors
		else
		{
			for(uint i = 0; i < square.lines.size(); i++)
			{
				if(square.lines[i].frontsector == square)
					doomb_trigger_monsters(square.lines[i].backsector, false);
				else
					doomb_trigger_monsters(square.lines[i].frontsector, false);
			}
		}
	}
}

states
{
		
	Death:
	Death.Bullet:
		"####" H 10
        {
            sprite = doomb_get_aditional_death_sprite();
            A_PlayerScream();
		    {busespecial = false;}
			doomb_much_blood();

        }
        "####" I 10 A_NoBlocking;
		"####" J 10 ;
		"####" KLM 10;
		"####" N -1 doomb_spawn_bloodpool();
	Stop;
		
	Death.Eat:
		TNT1 A 0 {bfriendly = false;}
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 A_GiveToTarget("EatMe",1);
		TNT1 A 0 doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		TNT1 A 0 doomb_much_blood();
		TNT1 A 0 ;
		XPL1 A 10 A_XScream;
		XPL1 B 20 A_NoBlocking;
		XPL1 CDE 10;
		TNT1 A 0 doomb_spawn_bloodpool();
		XPL1 E -1;
	Stop;
		
	Death.mini_gun:
		TNT1 A 0;
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		TNT1 A 0 A_Jump (128, 3);
	Goto Death;
	Death.Cut:
	Death.Saw:
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
			TNT1 A 0 doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		TNT1 A 0 doomb_Rip_Guts();
		TNT1 A 0 A_SpawnProjectile ("XDeathHalfMarine", 50, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 doomb_much_blood();
		XPL2 A 10 A_XScream;
		TNT1 A 0 doomb_much_blood();
		XPL2 B 20 A_NoBlocking;
		XPL2 CDE 10 doomb_much_blood();
		TNT1 A 0 doomb_spawn_bloodpool();
		XPL2 E -1;
	Stop;
		
	Death.Slime:
		TNT1 A 0 A_NoBlocking;
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		TNT1 A 0 A_PlaySound("BIGSCREA");
		TNT1 A 0 ;
		PMET AABBCCDDEEFFGGHHIIIII 10 doomb_show_effect("ExplosionSmoke", (0, 0, 0), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.5, 0), 0.1 );
		PMET IIIIIIIIIIJJJJJJJJJJJJJJJJJJJJJJKKKKKKKKKKKKKKKKKKKKKKKKKKLLLLLLLLLLLLLLL 3 doomb_show_effect("ExplosionSmoke", (0, 0, 0), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.5, 0), 0.1 );
		TNT1 A -1;
	Stop;
		
	Death.Rip:
		TNT1 A 0;
		TNT1 A 0 {bfriendly = false;}
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 doomb_much_blood();
		XPL3 A 10 A_XScream;
		TNT1 A 0 doomb_much_blood();
		XPL3 B 20 A_NoBlocking;
		TNT1 A 0 ;
		TNT1 A 0 doomb_much_blood();
		XPL3 CDEFF 10 doomb_much_blood();
		TNT1 A 0 doomb_spawn_bloodpool();
		XPL3 F -1;
	Stop;

	XDeath:
		TNT1 A 0 ThrustThingZ(0,60,0,1);
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		TNT1 A 0 A_SpawnProjectile ("MarineXDeath", 0, 0, random (0, 360), 2, random (0, 160));
		PPOD A 0 A_SpawnItemEx("BasicMarineGib1", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERTRANSLATION);
		PPOD A 0 A_SpawnItemEx("BasicMarineGib1", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERTRANSLATION);
		PPOD A 0 A_SpawnItemEx("BasicMarineGib1", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERTRANSLATION);
		PPOD A 0 A_SpawnItemEx("BasicMarineGib1", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERTRANSLATION);
		MHEA A 7 A_XScream;
		MHEA B 7 A_NoBlocking;
		TNT1 A 0 ;
		MHEA CD 7;
		MHEA E -1;
	Stop;
		
	Crush:
	Death.Stomp:
		TNT1 A 0;
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAA 0 doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, 0 ), doomb_random_velocity(7) );
		TNT1 A 0 doomb_blood_mist(times:6);
			TNT1 A 0 doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		TNT1 A 0 doomb_spawn_bloodpool();
		TNT1 A 0 A_SpawnItem ("CrushedRemains");
		TNT1 A 0 ;
		TNT1 A 1;
		TNT1 A 1 A_XScream;
		TNT1 A 1 A_NoBlocking;
	Stop;
		
	Death.Blast:
	Death.punch:
	Death.SSG:
		"####" O 2
        {
            sprite = doomb_get_aditional_death_sprite();

            A_FaceTarget();
		    {busespecial = false;}
		    {bfriendly = false;}
			doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		    doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(7) );
		    doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, 32 ), doomb_random_velocity(7) );
		    doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(7) );
			doomb_spray_decal("BrutalBloodSuper");
		    A_SpawnProjectile ("XDeathArm1", 32, 0, random (170, 190), 2, random (0, 40));
		    A_XScream();
		    A_NoBlocking();
        }
        "####" OPQRSTU 8;
		"####" U -1 doomb_spawn_bloodpool();
	Stop;


	Death.Rape:
		TNT1 A 0 A_NoBlocking;
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		TNT1 A 0 doomb_much_blood();
		XPL4 A 20 A_XScream;
			TNT1 A 0 doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		TNT1 A 0 doomb_much_blood();
		XPL4 BCDEF 20 doomb_much_blood();
		TNT1 A 0 doomb_spawn_bloodpool();
		XPL4 F -1;
	Stop;
		
	Death.plasma:
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		TNT1 A 0 A_XScream;
		TNT1 A 0 A_NoBlocking;
		TNT1 AAA 0 doomb_for_khorne("doomb_non_interactive_blood", "red_blood_trail", (0, 0, random(20, 30) ), doomb_random_velocity(7) );
		TNT1 A 0 A_SpawnProjectile ("XDeathBurnedArm", 32, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 A_SpawnProjectile ("XDeathBurnedLeg", 32, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 A_SpawnProjectile ("XDeathBurnedSkull", 32, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 doomb_spawn_burned_flesh;
		EXPL AAAAAA 0 doomb_show_effect("ExplosionSmoke", (0, 0, 0), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 1) ) );
		TNT1 A 1;
		TNT1 A 0 ;
	Stop;
		
		
	fire_death_1:
		TNT1 A 0;
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		PBUR A 1;
		PBUR A 1 A_Scream;
		PBUR A 1 A_NoBlocking;
		TNT1 A 0 ;
		PBUR AAAABBBBCCCC 2 doomb_show_effect("FlameTrails", (0, 0, 32), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5) ), (0.3, 0) );
		PBUR DDDDEEEE 2 doomb_show_effect("FlameTrails", (0, 0, 16), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5) ), (0.3, 0) );
		PBUR EEEEE 4 doomb_show_effect("FlameTrails", (0, 0, 8), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5) ), (0.3, 0) );
		PBUR EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 6 doomb_show_effect("ExplosionSmoke", (0, 0, 8), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.5, 0), 0.1 );
		PBUR E -1;
	Stop;
		
	Death.Fire:
		tnt1 a 0 a_jump(128, "fire_death_1");
		TNT1 A 0;
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		TNT1 A 0 A_PlaySound("BIGSCREA");
		BURN W 6 A_Scream;
		BURN X 6 A_NoBlocking;
		TNT1 A 0 ;
		BUR2 ABCD 6 BRIGHT doomb_show_effect("ExplosionSmoke", (0, 0, 8), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.5, 0), 0.1 );
		BURN FGHIJKL 6 BRIGHT doomb_show_effect("ExplosionSmoke", (0, 0, 8), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.5, 0), 0.1 );
		BURN MNOPQRSTUV 6 BRIGHT doomb_show_effect("ExplosionSmoke", (0, 0, 8), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.5, 0), 0.1 );
		BURN VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV 6 doomb_show_effect("ExplosionSmoke", (0, 0, 8), (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.5, 0), 0.1 );
		BURN V -1;
	Stop;
		
		
	Death.Explosive_Impact:
		TNT1 A 0;
		TNT1 A 0 {busespecial = false;}
		TNT1 A 0 {bfriendly = false;}
		tnt1 A 0 ThrustThingZ(0,30,0,1);
		TNT1 A 0 doomb_severed_limb("eye", "spawn", (0, 0, 50), doomb_random_velocity(7) );
		TNT1 A 0 doomb_severed_limb("head_piece", "spawn", (0, 0, 50), doomb_random_velocity(7) );
		TNT1 A 0 doomb_severed_limb("jaw", "spawn", (0, 0, 50), doomb_random_velocity(7) );
		TNT1 A 0 doomb_severed_limb("SmallBrainPiece", "spawn", (0, 0, 50), doomb_random_velocity(7) );
		TNT1 AA 0 doomb_spray_decal("BrutalBloodSuper");
		tnt1 AAAAAAAAAAA 0 A_SpawnProjectile ("Brutal_Blood", 50, 0, random (0, 360), 2, random (0, 160));
		tnt1 A 0 A_SpawnProjectile ("XDeathArm1", 35, 0, random (0, 360), 2, random (0, 160));
		TNT1 A 0 doomb_spawn_entrails( (0, 0, random(30, 35) ) );
		PPOD A 0 A_SpawnItemEx("BasicMarineGib1", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERTRANSLATION);
		tnt1 A 0 A_XScream;
		XPL6 A 5;
		tnt1 A 0 A_NoBlocking;
		XPL6 BCDE 5;
		TNT1 A 0 ;
		XPL6 F -1;
	Stop;
		
	Crush:
		TNT1 A 0 A_PlaySound("misc/xdeath4");
		TNT1 A 0 {busespecial = false;}
		CRS1 A -1;
	Stop;
		
	Death.HKFT:
	Death.BHFT:
	Death.RVFT:
		TNT1 A 1 A_Scream;
		TNT1 A 0 {busespecial = false;}
		TNT1 A 1 A_NoBlocking;
		TNT1 A 0 A_GiveToTarget("Curbstomp_Marine",1);
		TNT1 A 0 {bfriendly = false;}
	Stop;
		
	Death.FatalityMarine:
		TNT1 A 1 A_PlayerScream;
		TNT1 A 1 A_NoBlocking;
		TNT1 A 0 A_GiveToTarget("Fatality_Marine",1);
	Stop;

		
		
		

		
		
		
		
		
		
		
		
		
		
		
	Salute:
		TNT1 A 0 A_Jump(255, "Salutes1", "Salutes2");
	Salutes1:
		TNT1 A 0 A_PlaySound ("DSSALUTE");
		MWAV BCDEFEFDCB 6;
        tnt1 a 0 setstatelabel("FollowPlayer");
    stop;
		
	Salutes2:
		TNT1 A 0 A_PlaySound ("DSSALUTE");
		MWAV GHGHG 8;
        tnt1 a 0 setstatelabel("FollowPlayer");
    stop;
}

}



class doomb_player_marine_counter : doomb_inventory
{

default
{
	Inventory.MaxAmount 1;
	Inventory.Amount 1;
	+INVENTORY.UNTOSSABLE
	+INVENTORY.UNCLEARABLE
	+INVENTORY.UNDROPPABLE
}

private array<string> marine_types;
private vector2 owner_look_dir;

void add_marine_type(doomb_marine_base caller = null, name n = "")
{
	if(caller && n != "" && level.time > 0)
	{
		marine_types.push(n);
	}
}

void remove_marine_type(name n)
{
	if(n != "")
	{
		uint ni = marine_types.find(n);

		if(ni < marine_types.size() )
			marine_types.delete(ni);
	}
}

private void doomb_owner_look_vector()
{
	if(owner)
		owner_look_dir = (cos(owner.angle), sin(owner.angle) );
}

private void doomb_spawn_marines()
{
	doomb_owner_look_vector();

	for(uint i = 0; i < marine_types.size(); i++)
	{
		if(marine_types[i] )
		{
			spawn(marine_types[i], pos: owner.pos + (owner_look_dir * owner. radius * -1) );
		}
	}
}

override void doeffect()
{
	if(level.time < 1)
		doomb_spawn_marines();
}

}


class every_marine_spawner : actor
{

States
{
	spawn:
		tnt1 a 1 nodelay
		{
			spawn("doomb_Marine_PlasmaGun");
			spawn("doomb_Marine_RocketL");
			spawn("doomb_Marine_Shotgun");
			spawn("doomb_Marine_bfg");
			spawn("doomb_Marine_Rifle");
			spawn("doomb_Marine_Minigun");
		}
	stop;
}
}