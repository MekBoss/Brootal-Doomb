class visual_sfx : actor
{
protected bool show_something;
//if effect spawn own effect
protected eventhandler sfx;

protected visual_sfx doomb_show_effect(statelabel effect_name, vector3 offset = (0, 0, 0), vector3 velocity = (0, 0, 0), vector2 visual_size = (double.nan, double.nan), double translucency = double.nan)
{
	if(sfx)
		return (visual_sfx)(doomb_sfx_main(sfx).show_some_effect(self, effect_name, offset, velocity, visual_size, translucency) );

	else
		return null;
}


void set_event(eventhandler en)
{
	if(en.getclass() == 'doomb_sfx_main')
        sfx = en;
}

bool is_show_something() const
{
	return show_something;
}

override int SpecialMissileHit (Actor victim)
{
	vel = (0, 0, 0);
	return 0;
}

//sets if apperance was set outside of actor, overriding actor "defaults"
private uint changed_fields;

enum sfx_fields_flags
{
    CF_NONE = 0,
    CF_SCALE = 1,
    CF_ALPHA = 1 << 2,
};

//called when need change something from outside of actor
//no else cases because it handled aditionaly by next function
void doomb_set_appearance_global(vector2 sc = (double.nan, double.nan), double alph = double.nan, vector3 vel_v = (10, 0, 0) )
{
    if(sc == sc)
    {
        changed_fields |= CF_SCALE;
        if(sc.y == 0)
            scale = (sc.x, sc.x);
        else
            scale = sc;
    }

    if(alph == alph)
    {
        changed_fields |= CF_ALPHA;

        do
            a_fadeto(alph, 0.01, false);
        while(alpha > alph)
    }

    vel = vel_v;
}

//called from actor itself, change fields if it wasnt changed from outside
private void doomb_set_appearance(vector2 sc = (1, 1), double new_alpha = 1, double speed_scale = 1)
{
    show_something = true;

    vel *= speed_scale;

	if( !(changed_fields &= CF_SCALE) )
    {
        if(sc.y == 0)
            scale = (sc.x, sc.x);
        else
            scale = sc;
    }

    if( !(changed_fields &= CF_ALPHA) )
    {
        do
            a_fadeto(new_alpha, 0.01, false);
        while(alpha > new_alpha)
    }

}

default
{
	+DontSplash;
	+nointeraction;
	+noclip;
	+nogravity;
	+notonautomap;
	+thruactors
	radius 0;
	height 0;
	RenderStyle "Add";
	gravity 1;
}

states
{
	off:
		tnt1 a -1;
	stop;

	reset_condition:
		tnt1 a 0
		{
			changed_fields = 0;
			show_something = false;
			bcorpse = false;
			bnoclip = true;
			bnogravity = true;
			self.scale = (1, 1);
			self.vel = (0, 0, 0);
			alpha = 1;
			a_setrenderstyle(alpha, STYLE_Add);

			for(uint i = 0; i < 10; i++)
				a_stopsound(i);

			setorigin( (double.infinity, double.infinity, double.infinity), false );
		}
	goto off;
}

private string last_state_name;

/*
override void ondestroy()
{
	if(getclass() == "visual_sfx")
	{
		if(last_state_name != "")
			console.printf("last state was %s", last_state_name);
		
		if(last_state_name == "")
			console.printf("unknown state type, how is it possible?");
	}

	super.ondestroy();
}
*/

protected vector3 doomb_random_velocity(double factor = 1, bool trully = false)
{
	vector3 v;
	if(trully)
		v = (frandom(-1, 1), frandom(-1, 1), frandom(-1, 1) );
	
	else
		v = (frandom(-1, 1), frandom(-1, 1), frandom(0, 1) );

	v *= factor;

	return v;
}

}