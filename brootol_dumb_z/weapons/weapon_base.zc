class doomb_weapon_base : weapon abstract
{
//switch for weapon condition
protected uint dw_state;
protected bool iron_sight;

const psprite_kick = -5;

void dw_set_state(uint i = 0)
{
    dw_state = i;
}

//toogle to prevent trying to quick puch/kick/etc. in the same moment
protected bool in_specific_state;

protected void doomb_weapon_actions()
{
    switch(dw_state)
    {
        case DWF_GRENADE : 
            owner.Player.SetPSprite(PSP_WEAPON, self.FindState("Throw_Grenade") );
            dw_state = DWF_NONE;
		break;

        case DWF_KICK : 
            owner.Player.SetPSprite(PSP_WEAPON, self.FindState("weapon_kick") );
            dw_state = DWF_NONE;
		break;

        case DWF_TAUNT : 
            owner.Player.SetPSprite(PSP_WEAPON, self.FindState("taunt") );
            dw_state = DWF_NONE;
		break;
        
        case DWF_SALUTE : 
            owner.Player.SetPSprite(PSP_WEAPON, self.FindState("salute") );
            dw_state = DWF_NONE;
		break;
		
		default:
            dw_state = DWF_NONE;
		break;
    }
}

protected bool is_self_valid_weapon()
{
	if(owner && owner.player && !owner.bcorpse && owner.health > 0 && owner.player.readyweapon == self)
		return true;

	return false;
}

//check for special actions here, like kick or grenade throws
override void doeffect()
{
	if(is_self_valid_weapon() )
	{
		if(self.in_specific_state == false)
		{
			if(owner.player.findPsprite(psp_weapon) != null )//<-- null check, without it gzdoom crush after player death
			{
				if(instatesequence(owner.player.findPsprite(psp_weapon).curstate, self.findstate("ready_loop") ) )
				{
                    doomb_weapon_actions();
				}

				dw_state = DWF_NONE;
			}
		}
	}
}


default
{
	Weapon.BobRangeX 0.3;
	Weapon.BobRangeY 0.5;
	Weapon.BobSpeed 2.4;
	Weapon.BobStyle "InverseSmooth";

	+FLOORCLIP;
	+DONTGIB;
	Weapon.UpSound "";
	Weapon.Kickback 100;
	-WEAPON.MELEEWEAPON;
}

//base function for reloading magazine based weapon
protected void reload_weapon_magazine(string magazine_pool = "", string reserve_pool = "")
{
	if(magazine_pool == "" || magazine_pool == "") {return;}

	inventory magazine_ammo = owner.findinventory(magazine_pool);

	if(magazine_ammo == null)
	{
		owner.A_GiveInventory(magazine_pool);
		magazine_ammo = owner.findinventory(magazine_pool);
		magazine_ammo.amount --;
	}

	inventory main_ammo = owner.findinventory(reserve_pool);
	
	if(main_ammo == null)
	{console.printf("there is no %s ammo in player inventory", reserve_pool); return;}

	while( (magazine_ammo).amount < (magazine_ammo).maxamount && (main_ammo).amount > 0)
	{
		magazine_ammo.amount ++;
		main_ammo.amount --;
	}
}

//function which check and set weapon state to defined
protected void set_weapon_state(statelabel state_name = null)
{
	let player = owner.player;
	if(player == null) {console.printf("player dont exist, function 'set weapon', weapon %s", self.getclassname() ); return;}

	weapon wepon = player.ReadyWeapon;
	if(wepon == null)
	{console.printf("ready weapons dont exist, how do you managed to call this message?"); return;}

	if(player.findPsprite(psp_weapon) == null)
	{ console.printf("%s PSprite dont exist", player.ReadyWeapon.getclassname() ); return; }

	state new_state = wepon.findstate(state_name);
	if(new_state == null)
	{ console.printf("there is no some state in %s weapon", player.ReadyWeapon.getclassname() ); return; }

	Player.SetPSprite(PSP_WEAPON, new_state);
}

states
{
	bug:
		tnt1 a 1 {console.printf("Something fuckup, post bug report that %s weapon break", invoker.getclassname() );}
		tnt1 a 0 {invoker.destroy(); return;}
	stop;

	//it is important to use "get psprite" function to switch state back to normal
	//"goto state name;" is a static jump
	Throw_Grenade:
		TNT1 A 0 {A_StopSound(6); A_ZoomFactor(1.0); invoker.in_specific_state = true;}
		TNT1 A 0
		{
			if(countinv("GrenadeAmmo") < 1)
			{
				A_Print("No Grenades left");
				invoker.in_specific_state = false; 
				player.GetPSprite(StateInfo.mPSPIndex).SetState(player.ReadyWeapon.GetReadyState() );
			}
		}       
		GRTH ABCD 1;
		TNT1 A 0 A_PLaySound ("GRNPIN");
		GRTH EEFG 1 A_SetRoll(roll+0.5);
	    TNT1 A 1 A_PLaySound ("GRNTOSS");
		GRTH HI 1;
		TNT1 A 0 A_Fireprojectile("HandGrenade", random(-2,2), 1, 0, 0, 0, 0);
		GRTH JKLM 1 A_SetRoll(roll-0.5);
		TNT1 A 3;
		TNT1 A 0
		{
			A_SetRoll(0);
			invoker.in_specific_state = false;
			player.GetPSprite(StateInfo.mPSPIndex).SetState(player.ReadyWeapon.GetReadyState() );
		}
	Goto bug;


	weapon_kick:
        TNT1 A 0
        {
			invoker.in_specific_state = true;
            A_ZoomFactor(1.0);
        }
        tnt1 A 0 A_JumpIf (vel.z != 0, "AirKick");

		TNT1 A 0 A_PlaySound("KICK");
		TNT1 A 0 SetPlayerProperty(0,1,0);
		KICK BCD 1
        {
            a_setpitch(pitch - 0.3);
            a_setroll(roll - 0.3);
        }
        tnt1 a 0
		{
			FLineTraceData try_kick;
			LineTrace(self.player.mo.angle + frandom(-0.5, 0.5), 50, self.player.mo.pitch,
			offsetz:(self.player.viewz - self.player.mo.Pos.Z) / 2, data: try_kick);
			
			if(try_kick.hittype == TRACE_HitNone)
				return;

			if(try_kick.hittype == TRACE_HitFloor)
			{}
			if(try_kick.hittype == TRACE_HitCeiling)
			{}
			if(try_kick.hittype == TRACE_HitWall)
			{
				try_kick.HitLine.Activate(self, 0, SPAC_PCross|SPAC_Impact);
			}



			if(try_kick.hitactor != null)
			{
                try_kick.hitactor.giveinventory("KickHasHit", 1);
				int dam = random(15, 25) * (1 + countinv("PowerStrength") );
				try_kick.hitactor.damagemobj(self, self, dam, 'kick', 0, 0);
				try_kick.hitactor.vel =(sin(self.angle) * 5, cos(self.angle) * 5, 5);
			}

			else
			{
			    A_Explode(10, 40, 0);
			}

			A_PlaySound("player/cyborg/fist", 3);
			vector3 offset = self.pos - try_kick.HitLocation;
			invoker.doomb_show_effect("ExplosionSmoke", offset, (frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0.5, 1) ), (0.2,0), 0.15 );
			Radius_Quake (2, 6, 0, 5, 0);//(intensity, duration, damrad, tremrad, tid)
		}
        KICK HIGFEDCBA 1
        {
            a_setpitch(pitch + 0.1);
            a_setroll(roll + 0.1);
        } 
		tnt1 A 1
		{
			SetPlayerProperty(0,0,0);
			invoker.in_specific_state = false;
			player.GetPSprite(PSP_WEAPON).SetState(player.ReadyWeapon.GetReadyState() );
		}
	Goto bug;

			
	AirKick:
        TNT1 A 0
        {
			invoker.in_specific_state = true;
            A_ZoomFactor(1.0);
        }
		TNT1 A 0 A_PlaySound("KICK");
		TNT1 A 0 A_Recoil (-6);
		KLCK JKLMN 1;
		RIFF A 0 a_fireprojectile("AirKickAttack", 0, 0, 0, -31);
		KLCK O 3;
		KLCK PQRST 2;
		tnt1 A 1
		{
			SetPlayerProperty(0,0,0);
			invoker.in_specific_state = false;
			player.GetPSprite(PSP_WEAPON).SetState(player.ReadyWeapon.GetReadyState() );
		}
	Goto bug;


	Taunt:
        TNT1 A 0
        {
			invoker.in_specific_state = true;
            A_ZoomFactor(1.0);
			self.player.mo.setstatelabel("SayOneLiner");
        }
		TNT1 A 10;
		FUCK F 1;
		TNT1 A 0 BRIGHT a_fireprojectile("Taunter", 0, 0, -1, 0);
		TNT1 A 0 BRIGHT a_fireprojectile("Taunter", -9, 0, -1, 0);
		TNT1 A 0 BRIGHT a_fireprojectile("Taunter", 9, 0, -1, 0);
		FUCK G 1 A_PlaySound("FUCK", 2);
		FUCK HI 1 A_AlertMonsters;
		FUCK IHGF 1;
		TNT1 A 10;
		tnt1 A 1
		{
			invoker.in_specific_state = false;
			player.GetPSprite(PSP_WEAPON).SetState(player.ReadyWeapon.GetReadyState() );
		}
	Goto bug;

	Salute:
        TNT1 A 0
        {
			invoker.in_specific_state = true;
            A_ZoomFactor(1.0);
        }
		TNT1 A 0 A_ALertMonsters;
		SALU ABCDEDCDEDCDEDCBA 4;
		tnt1 A 1
		{
			invoker.in_specific_state = false;
			player.GetPSprite(PSP_WEAPON).SetState(player.ReadyWeapon.GetReadyState() );
		}
	Goto bug;
}

protected eventhandler sfx;
void set_event(eventhandler effects)
{
    if(effects.getclassname() == "doomb_sfx_main")
	    sfx = effects;
}

protected vector3 rotate_vector(vector3 v, double x_axis = double.nan, double y_axis = double.nan, double z_axis = double.nan)
{
	if (v == (0, 0, 0))
		return v;

	//thank you randy for this bug
	if(z_axis)
		z_axis *= -1;



	return v;
}

protected visual_sfx doomb_show_effect(statelabel effect_name, vector3 offset = (0, 0, 0), vector3 velocity = (0, 0, 0), vector2 visual_size = (double.nan, double.nan), double translucency = double.nan)
{
	if(!sfx) return null;
	if(!owner) return null;

	vector3 off = 
	(
		cos(owner.angle) * cos(owner.pitch),//x
		sin(owner.angle) * cos(owner.pitch),//y
		-sin(owner.pitch)//z
	);

	vector3 off_primar = off;
	off_primar *= 6;
	off_primar.z += (owner.Player.viewz - owner.player.mo.pos.z - 3) * owner.player.crouchfactor;

	offset.x *= off.x;
	offset.y *= off.y;
	offset.z *= off.z;

	off_primar += offset;

	vector3 v = off;
	if(velocity != (0, 0, 0))
		v += (frandom(-0.1, 0.1), frandom(-0.1, 0.1), frandom(-0.1, 0.1) );

	return (visual_sfx)(doomb_sfx_main(self.sfx).show_some_effect(owner, effect_name, off_primar, v, visual_size, translucency) );
}


}


enum DOOMB_WEAPON_FLAGS
{
    DWF_NONE = 0,
    DWF_KICK = 1,
    DWF_GRENADE,
    DWF_DUALWIELD,
    DWF_UNLOAD,
    DWF_TAUNT,
    DWF_SALUTE
};


class weapon_actions : eventhandler
{
override void NetworkProcess(ConsoleEvent e)
{
	if(e.Name == 'do_kick')
	{
		if(players[e.Player].readyweapon is "doomb_weapon_base")
		{
			doomb_weapon_base(players[e.Player].readyweapon).dw_set_state(DWF_KICK);
		}
	}

	if(e.Name == 'throw_grenade')
	{
		if(players[e.Player].readyweapon is "doomb_weapon_base")
		{
			doomb_weapon_base(players[e.Player].readyweapon).dw_set_state(DWF_GRENADE);
		}
	}
	
	if(e.Name == 'taunt')
	{
		if(players[e.Player].readyweapon is "doomb_weapon_base")
		{
			doomb_weapon_base(players[e.Player].readyweapon).dw_set_state(DWF_TAUNT);
		}
	}

	if(e.Name == 'DWF_SALUTE')
	{
		if(players[e.Player].readyweapon is "doomb_weapon_base")
		{
			doomb_weapon_base(players[e.Player].readyweapon).dw_set_state(DWF_SALUTE);
		}
	}
}

}


